
dht11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800395c  0800395c  0001395c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a1c  08003a1c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003a1c  08003a1c  00013a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a24  08003a24  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a24  08003a24  00013a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a28  08003a28  00013a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000070  08003a9c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08003a9c  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d76b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001da7  00000000  00000000  0002d80b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  0002f5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  00030238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172c2  00000000  00000000  00030df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e256  00000000  00000000  000480b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f276  00000000  00000000  00056308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e557e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bd0  00000000  00000000  000e55d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003944 	.word	0x08003944

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003944 	.word	0x08003944

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <DelayUs>:
#include "dht11.h"

extern TIM_HandleTypeDef htim1;

// us단위의 지연시간
void DelayUs(uint32_t us) {
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	// 타이머 1번을 0으로 초기화
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <DelayUs+0x2c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2200      	movs	r2, #0
 8000592:	625a      	str	r2, [r3, #36]	; 0x24
	// 타이머 1번이 1MHz의 클럭을 입력 받아 증가할때 us보다 커지면 루프 중단
	while(__HAL_TIM_GET_COUNTER(&htim1) < us);
 8000594:	bf00      	nop
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <DelayUs+0x2c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d8f9      	bhi.n	8000596 <DelayUs+0x12>
}
 80005a2:	bf00      	nop
 80005a4:	bf00      	nop
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	2000008c 	.word	0x2000008c

080005b4 <checkPinWithTimeoutUs>:

void checkPinWithTimeoutUs(uint32_t us, int value) {
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <checkPinWithTimeoutUs+0x34>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2200      	movs	r2, #0
 80005c4:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim1) < us) && value);
 80005c6:	bf00      	nop
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <checkPinWithTimeoutUs+0x34>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d902      	bls.n	80005da <checkPinWithTimeoutUs+0x26>
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d1f6      	bne.n	80005c8 <checkPinWithTimeoutUs+0x14>
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	2000008c 	.word	0x2000008c

080005ec <DHT11_Start>:

void DHT11_Start() {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
	// output mode
  GPIO_InitStruct.Pin = dht11_Pin;
 8000600:	2301      	movs	r3, #1
 8000602:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000604:	2301      	movs	r3, #1
 8000606:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(dht11_GPIO_Port, &GPIO_InitStruct);
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	4619      	mov	r1, r3
 8000614:	480d      	ldr	r0, [pc, #52]	; (800064c <DHT11_Start+0x60>)
 8000616:	f000 fd0b 	bl	8001030 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(dht11_GPIO_Port, dht11_Pin, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2101      	movs	r1, #1
 800061e:	480b      	ldr	r0, [pc, #44]	; (800064c <DHT11_Start+0x60>)
 8000620:	f000 fea2 	bl	8001368 <HAL_GPIO_WritePin>
  DelayUs(18000);
 8000624:	f244 6050 	movw	r0, #18000	; 0x4650
 8000628:	f7ff ffac 	bl	8000584 <DelayUs>
  // input mode
  GPIO_InitStruct.Pin = dht11_Pin;
 800062c:	2301      	movs	r3, #1
 800062e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(dht11_GPIO_Port, &GPIO_InitStruct);
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	4619      	mov	r1, r3
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <DHT11_Start+0x60>)
 800063e:	f000 fcf7 	bl	8001030 <HAL_GPIO_Init>
}
 8000642:	bf00      	nop
 8000644:	3718      	adds	r7, #24
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40020800 	.word	0x40020800

08000650 <DHT11_CheckResponse>:

uint8_t DHT11_CheckResponse() {
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
	uint8_t	Response = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	71fb      	strb	r3, [r7, #7]
	DelayUs(40);
 800065a:	2028      	movs	r0, #40	; 0x28
 800065c:	f7ff ff92 	bl	8000584 <DelayUs>
	if(!HAL_GPIO_ReadPin(dht11_GPIO_Port, dht11_Pin)) {
 8000660:	2101      	movs	r1, #1
 8000662:	4811      	ldr	r0, [pc, #68]	; (80006a8 <DHT11_CheckResponse+0x58>)
 8000664:	f000 fe68 	bl	8001338 <HAL_GPIO_ReadPin>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d10e      	bne.n	800068c <DHT11_CheckResponse+0x3c>
		DelayUs(80);
 800066e:	2050      	movs	r0, #80	; 0x50
 8000670:	f7ff ff88 	bl	8000584 <DelayUs>
		if(HAL_GPIO_ReadPin(dht11_GPIO_Port, dht11_Pin)) Response = 1;
 8000674:	2101      	movs	r1, #1
 8000676:	480c      	ldr	r0, [pc, #48]	; (80006a8 <DHT11_CheckResponse+0x58>)
 8000678:	f000 fe5e 	bl	8001338 <HAL_GPIO_ReadPin>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d002      	beq.n	8000688 <DHT11_CheckResponse+0x38>
 8000682:	2301      	movs	r3, #1
 8000684:	71fb      	strb	r3, [r7, #7]
 8000686:	e001      	b.n	800068c <DHT11_CheckResponse+0x3c>
		else Response = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	71fb      	strb	r3, [r7, #7]
	}
	checkPinWithTimeoutUs(200, HAL_GPIO_ReadPin(dht11_GPIO_Port, dht11_Pin));
 800068c:	2101      	movs	r1, #1
 800068e:	4806      	ldr	r0, [pc, #24]	; (80006a8 <DHT11_CheckResponse+0x58>)
 8000690:	f000 fe52 	bl	8001338 <HAL_GPIO_ReadPin>
 8000694:	4603      	mov	r3, r0
 8000696:	4619      	mov	r1, r3
 8000698:	20c8      	movs	r0, #200	; 0xc8
 800069a:	f7ff ff8b 	bl	80005b4 <checkPinWithTimeoutUs>
	return Response;
 800069e:	79fb      	ldrb	r3, [r7, #7]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40020800 	.word	0x40020800

080006ac <DHT11_Read>:

uint8_t DHT11_Read() {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for(j = 0; j < 8; j++) {
 80006b2:	2300      	movs	r3, #0
 80006b4:	71bb      	strb	r3, [r7, #6]
 80006b6:	e03e      	b.n	8000736 <DHT11_Read+0x8a>
		checkPinWithTimeoutUs(200, !HAL_GPIO_ReadPin(dht11_GPIO_Port, dht11_Pin));
 80006b8:	2101      	movs	r1, #1
 80006ba:	4823      	ldr	r0, [pc, #140]	; (8000748 <DHT11_Read+0x9c>)
 80006bc:	f000 fe3c 	bl	8001338 <HAL_GPIO_ReadPin>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	bf0c      	ite	eq
 80006c6:	2301      	moveq	r3, #1
 80006c8:	2300      	movne	r3, #0
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	4619      	mov	r1, r3
 80006ce:	20c8      	movs	r0, #200	; 0xc8
 80006d0:	f7ff ff70 	bl	80005b4 <checkPinWithTimeoutUs>
		DelayUs(40);
 80006d4:	2028      	movs	r0, #40	; 0x28
 80006d6:	f7ff ff55 	bl	8000584 <DelayUs>
		if(!HAL_GPIO_ReadPin(dht11_GPIO_Port, dht11_Pin)) {
 80006da:	2101      	movs	r1, #1
 80006dc:	481a      	ldr	r0, [pc, #104]	; (8000748 <DHT11_Read+0x9c>)
 80006de:	f000 fe2b 	bl	8001338 <HAL_GPIO_ReadPin>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d10e      	bne.n	8000706 <DHT11_Read+0x5a>
			i &= ~(1 << (7 - j));
 80006e8:	79bb      	ldrb	r3, [r7, #6]
 80006ea:	f1c3 0307 	rsb	r3, r3, #7
 80006ee:	2201      	movs	r2, #1
 80006f0:	fa02 f303 	lsl.w	r3, r2, r3
 80006f4:	b25b      	sxtb	r3, r3
 80006f6:	43db      	mvns	r3, r3
 80006f8:	b25a      	sxtb	r2, r3
 80006fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fe:	4013      	ands	r3, r2
 8000700:	b25b      	sxtb	r3, r3
 8000702:	71fb      	strb	r3, [r7, #7]
 8000704:	e00b      	b.n	800071e <DHT11_Read+0x72>
		}
		else
			i |= (1 << (7 - j));
 8000706:	79bb      	ldrb	r3, [r7, #6]
 8000708:	f1c3 0307 	rsb	r3, r3, #7
 800070c:	2201      	movs	r2, #1
 800070e:	fa02 f303 	lsl.w	r3, r2, r3
 8000712:	b25a      	sxtb	r2, r3
 8000714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000718:	4313      	orrs	r3, r2
 800071a:	b25b      	sxtb	r3, r3
 800071c:	71fb      	strb	r3, [r7, #7]
		checkPinWithTimeoutUs(200, HAL_GPIO_ReadPin(dht11_GPIO_Port, dht11_Pin));
 800071e:	2101      	movs	r1, #1
 8000720:	4809      	ldr	r0, [pc, #36]	; (8000748 <DHT11_Read+0x9c>)
 8000722:	f000 fe09 	bl	8001338 <HAL_GPIO_ReadPin>
 8000726:	4603      	mov	r3, r0
 8000728:	4619      	mov	r1, r3
 800072a:	20c8      	movs	r0, #200	; 0xc8
 800072c:	f7ff ff42 	bl	80005b4 <checkPinWithTimeoutUs>
	for(j = 0; j < 8; j++) {
 8000730:	79bb      	ldrb	r3, [r7, #6]
 8000732:	3301      	adds	r3, #1
 8000734:	71bb      	strb	r3, [r7, #6]
 8000736:	79bb      	ldrb	r3, [r7, #6]
 8000738:	2b07      	cmp	r3, #7
 800073a:	d9bd      	bls.n	80006b8 <DHT11_Read+0xc>
	}
	return i;
 800073c:	79fb      	ldrb	r3, [r7, #7]
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40020800 	.word	0x40020800

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000752:	f000 faf1 	bl	8000d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000756:	f000 f82f 	bl	80007b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075a:	f000 f905 	bl	8000968 <MX_GPIO_Init>
  MX_TIM1_Init();
 800075e:	f000 f889 	bl	8000874 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000762:	f000 f8d7 	bl	8000914 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start(&htim1);
 8000766:	4812      	ldr	r0, [pc, #72]	; (80007b0 <main+0x64>)
 8000768:	f001 fac0 	bl	8001cec <HAL_TIM_Base_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //센서 데이터 읽기
	  DHT11_Start();// 초기화
 800076c:	f7ff ff3e 	bl	80005ec <DHT11_Start>
	  DHT11_CheckResponse();
 8000770:	f7ff ff6e 	bl	8000650 <DHT11_CheckResponse>
	  uint8_t data[5];
	  for(int i = 1; i < 5; i++)//5바이트 첨가
 8000774:	2301      	movs	r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	e00b      	b.n	8000792 <main+0x46>
		  data[i] = DHT11_Read();
 800077a:	f7ff ff97 	bl	80006ac <DHT11_Read>
 800077e:	4603      	mov	r3, r0
 8000780:	4619      	mov	r1, r3
 8000782:	1d3a      	adds	r2, r7, #4
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	4413      	add	r3, r2
 8000788:	460a      	mov	r2, r1
 800078a:	701a      	strb	r2, [r3, #0]
	  for(int i = 1; i < 5; i++)//5바이트 첨가
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	3301      	adds	r3, #1
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	2b04      	cmp	r3, #4
 8000796:	ddf0      	ble.n	800077a <main+0x2e>
	  // 5개 바이트
	  //[습도 상위][습도 하위][온도 상위][온도 하위][check sum :sum]
	  // 위치 계산
	  printf("T = %d H = %d\n", data[0], data[1]);
 8000798:	793b      	ldrb	r3, [r7, #4]
 800079a:	4619      	mov	r1, r3
 800079c:	797b      	ldrb	r3, [r7, #5]
 800079e:	461a      	mov	r2, r3
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <main+0x68>)
 80007a2:	f002 f941 	bl	8002a28 <iprintf>
	  HAL_Delay(3000);
 80007a6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80007aa:	f000 fb37 	bl	8000e1c <HAL_Delay>
  {
 80007ae:	e7dd      	b.n	800076c <main+0x20>
 80007b0:	2000008c 	.word	0x2000008c
 80007b4:	0800395c 	.word	0x0800395c

080007b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b094      	sub	sp, #80	; 0x50
 80007bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 0320 	add.w	r3, r7, #32
 80007c2:	2230      	movs	r2, #48	; 0x30
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f002 f926 	bl	8002a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007dc:	2300      	movs	r3, #0
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	4b22      	ldr	r3, [pc, #136]	; (800086c <SystemClock_Config+0xb4>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	4a21      	ldr	r2, [pc, #132]	; (800086c <SystemClock_Config+0xb4>)
 80007e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ea:	6413      	str	r3, [r2, #64]	; 0x40
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <SystemClock_Config+0xb4>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <SystemClock_Config+0xb8>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a1b      	ldr	r2, [pc, #108]	; (8000870 <SystemClock_Config+0xb8>)
 8000802:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000806:	6013      	str	r3, [r2, #0]
 8000808:	4b19      	ldr	r3, [pc, #100]	; (8000870 <SystemClock_Config+0xb8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000814:	2302      	movs	r3, #2
 8000816:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000818:	2301      	movs	r3, #1
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081c:	2310      	movs	r3, #16
 800081e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000820:	2300      	movs	r3, #0
 8000822:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000824:	f107 0320 	add.w	r3, r7, #32
 8000828:	4618      	mov	r0, r3
 800082a:	f000 fdb7 	bl	800139c <HAL_RCC_OscConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000834:	f000 f8e6 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000838:	230f      	movs	r3, #15
 800083a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f001 f81a 	bl	800188c <HAL_RCC_ClockConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800085e:	f000 f8d1 	bl	8000a04 <Error_Handler>
  }
}
 8000862:	bf00      	nop
 8000864:	3750      	adds	r7, #80	; 0x50
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800
 8000870:	40007000 	.word	0x40007000

08000874 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087a:	f107 0308 	add.w	r3, r7, #8
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000888:	463b      	mov	r3, r7
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000890:	4b1e      	ldr	r3, [pc, #120]	; (800090c <MX_TIM1_Init+0x98>)
 8000892:	4a1f      	ldr	r2, [pc, #124]	; (8000910 <MX_TIM1_Init+0x9c>)
 8000894:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000896:	4b1d      	ldr	r3, [pc, #116]	; (800090c <MX_TIM1_Init+0x98>)
 8000898:	220f      	movs	r2, #15
 800089a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089c:	4b1b      	ldr	r3, [pc, #108]	; (800090c <MX_TIM1_Init+0x98>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MX_TIM1_Init+0x98>)
 80008a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008aa:	4b18      	ldr	r3, [pc, #96]	; (800090c <MX_TIM1_Init+0x98>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008b0:	4b16      	ldr	r3, [pc, #88]	; (800090c <MX_TIM1_Init+0x98>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <MX_TIM1_Init+0x98>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008bc:	4813      	ldr	r0, [pc, #76]	; (800090c <MX_TIM1_Init+0x98>)
 80008be:	f001 f9c5 	bl	8001c4c <HAL_TIM_Base_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80008c8:	f000 f89c 	bl	8000a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008d2:	f107 0308 	add.w	r3, r7, #8
 80008d6:	4619      	mov	r1, r3
 80008d8:	480c      	ldr	r0, [pc, #48]	; (800090c <MX_TIM1_Init+0x98>)
 80008da:	f001 fa61 	bl	8001da0 <HAL_TIM_ConfigClockSource>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80008e4:	f000 f88e 	bl	8000a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e8:	2300      	movs	r3, #0
 80008ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008f0:	463b      	mov	r3, r7
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_TIM1_Init+0x98>)
 80008f6:	f001 fc35 	bl	8002164 <HAL_TIMEx_MasterConfigSynchronization>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000900:	f000 f880 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	3718      	adds	r7, #24
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	2000008c 	.word	0x2000008c
 8000910:	40010000 	.word	0x40010000

08000914 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 800091a:	4a12      	ldr	r2, [pc, #72]	; (8000964 <MX_USART1_UART_Init+0x50>)
 800091c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 8000920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000924:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 800093a:	220c      	movs	r2, #12
 800093c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 800094c:	f001 fc78 	bl	8002240 <HAL_UART_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000956:	f000 f855 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200000d4 	.word	0x200000d4
 8000964:	40011000 	.word	0x40011000

08000968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <MX_GPIO_Init+0x94>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a1d      	ldr	r2, [pc, #116]	; (80009fc <MX_GPIO_Init+0x94>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MX_GPIO_Init+0x94>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b17      	ldr	r3, [pc, #92]	; (80009fc <MX_GPIO_Init+0x94>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a16      	ldr	r2, [pc, #88]	; (80009fc <MX_GPIO_Init+0x94>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_GPIO_Init+0x94>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(dht11_GPIO_Port, dht11_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2101      	movs	r1, #1
 80009ba:	4811      	ldr	r0, [pc, #68]	; (8000a00 <MX_GPIO_Init+0x98>)
 80009bc:	f000 fcd4 	bl	8001368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : dht11_Pin */
  GPIO_InitStruct.Pin = dht11_Pin;
 80009c0:	2301      	movs	r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(dht11_GPIO_Port, &GPIO_InitStruct); // output
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	4619      	mov	r1, r3
 80009d6:	480a      	ldr	r0, [pc, #40]	; (8000a00 <MX_GPIO_Init+0x98>)
 80009d8:	f000 fb2a 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009dc:	2302      	movs	r3, #2
 80009de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); // input
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	4619      	mov	r1, r3
 80009ee:	4804      	ldr	r0, [pc, #16]	; (8000a00 <MX_GPIO_Init+0x98>)
 80009f0:	f000 fb1e 	bl	8001030 <HAL_GPIO_Init>

  //pin의 입출력의 방향을 이 함수를 이용해서 변경가능
}
 80009f4:	bf00      	nop
 80009f6:	3720      	adds	r7, #32
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020800 	.word	0x40020800

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <Error_Handler+0x8>
	...

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	4a0f      	ldr	r2, [pc, #60]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a24:	6453      	str	r3, [r2, #68]	; 0x44
 8000a26:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	4a08      	ldr	r2, [pc, #32]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a40:	6413      	str	r3, [r2, #64]	; 0x40
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800

08000a60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <HAL_TIM_Base_MspInit+0x3c>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d10d      	bne.n	8000a8e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <HAL_TIM_Base_MspInit+0x40>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	4a09      	ldr	r2, [pc, #36]	; (8000aa0 <HAL_TIM_Base_MspInit+0x40>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6453      	str	r3, [r2, #68]	; 0x44
 8000a82:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <HAL_TIM_Base_MspInit+0x40>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a8e:	bf00      	nop
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40010000 	.word	0x40010000
 8000aa0:	40023800 	.word	0x40023800

08000aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a19      	ldr	r2, [pc, #100]	; (8000b28 <HAL_UART_MspInit+0x84>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d12c      	bne.n	8000b20 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	4a17      	ldr	r2, [pc, #92]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000ad0:	f043 0310 	orr.w	r3, r3, #16
 8000ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	f003 0310 	and.w	r3, r3, #16
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a10      	ldr	r2, [pc, #64]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000afe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b10:	2307      	movs	r3, #7
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <HAL_UART_MspInit+0x8c>)
 8000b1c:	f000 fa88 	bl	8001030 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	; 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40011000 	.word	0x40011000
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020000 	.word	0x40020000

08000b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <NMI_Handler+0x4>

08000b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <HardFault_Handler+0x4>

08000b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <MemManage_Handler+0x4>

08000b46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <BusFault_Handler+0x4>

08000b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <UsageFault_Handler+0x4>

08000b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b80:	f000 f92c 	bl	8000ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	e00a      	b.n	8000bb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b9a:	f3af 8000 	nop.w
 8000b9e:	4601      	mov	r1, r0
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	1c5a      	adds	r2, r3, #1
 8000ba4:	60ba      	str	r2, [r7, #8]
 8000ba6:	b2ca      	uxtb	r2, r1
 8000ba8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3301      	adds	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697a      	ldr	r2, [r7, #20]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	dbf0      	blt.n	8000b9a <_read+0x12>
  }

  return len;
 8000bb8:	687b      	ldr	r3, [r7, #4]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
 8000be2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bea:	605a      	str	r2, [r3, #4]
  return 0;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <_isatty>:

int _isatty(int file)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c34:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <_sbrk+0x5c>)
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <_sbrk+0x60>)
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <_sbrk+0x64>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <_sbrk+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d207      	bcs.n	8000c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c5c:	f001 feb2 	bl	80029c4 <__errno>
 8000c60:	4603      	mov	r3, r0
 8000c62:	220c      	movs	r2, #12
 8000c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	e009      	b.n	8000c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <_sbrk+0x64>)
 8000c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20020000 	.word	0x20020000
 8000c8c:	00000400 	.word	0x00000400
 8000c90:	20000118 	.word	0x20000118
 8000c94:	20000130 	.word	0x20000130

08000c98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <SystemInit+0x20>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <SystemInit+0x20>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <_write>:
#include "uart.h"
#include <stdio.h>

extern UART_HandleTypeDef huart1;

int _write(int file, char *p, int len) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, p, len, 1);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	2301      	movs	r3, #1
 8000cce:	68b9      	ldr	r1, [r7, #8]
 8000cd0:	4803      	ldr	r0, [pc, #12]	; (8000ce0 <_write+0x24>)
 8000cd2:	f001 fb02 	bl	80022da <HAL_UART_Transmit>
	return len;
 8000cd6:	687b      	ldr	r3, [r7, #4]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	200000d4 	.word	0x200000d4

08000ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ce8:	480d      	ldr	r0, [pc, #52]	; (8000d20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cea:	490e      	ldr	r1, [pc, #56]	; (8000d24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cec:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf0:	e002      	b.n	8000cf8 <LoopCopyDataInit>

08000cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf6:	3304      	adds	r3, #4

08000cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cfc:	d3f9      	bcc.n	8000cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfe:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d00:	4c0b      	ldr	r4, [pc, #44]	; (8000d30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d04:	e001      	b.n	8000d0a <LoopFillZerobss>

08000d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d08:	3204      	adds	r2, #4

08000d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d0c:	d3fb      	bcc.n	8000d06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d0e:	f7ff ffc3 	bl	8000c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d12:	f001 fe5d 	bl	80029d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d16:	f7ff fd19 	bl	800074c <main>
  bx  lr    
 8000d1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d24:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d28:	08003a2c 	.word	0x08003a2c
  ldr r2, =_sbss
 8000d2c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d30:	20000130 	.word	0x20000130

08000d34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <ADC_IRQHandler>
	...

08000d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <HAL_Init+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0d      	ldr	r2, [pc, #52]	; (8000d78 <HAL_Init+0x40>)
 8000d42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <HAL_Init+0x40>)
 8000d4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a07      	ldr	r2, [pc, #28]	; (8000d78 <HAL_Init+0x40>)
 8000d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d60:	2003      	movs	r0, #3
 8000d62:	f000 f931 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d66:	200f      	movs	r0, #15
 8000d68:	f000 f808 	bl	8000d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d6c:	f7ff fe50 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40023c00 	.word	0x40023c00

08000d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_InitTick+0x54>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_InitTick+0x58>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 f93b 	bl	8001016 <HAL_SYSTICK_Config>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00e      	b.n	8000dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b0f      	cmp	r3, #15
 8000dae:	d80a      	bhi.n	8000dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db0:	2200      	movs	r2, #0
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f000 f911 	bl	8000fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dbc:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <HAL_InitTick+0x5c>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e000      	b.n	8000dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000000 	.word	0x20000000
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	20000004 	.word	0x20000004

08000ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_IncTick+0x20>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x24>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <HAL_IncTick+0x24>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	2000011c 	.word	0x2000011c

08000e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <HAL_GetTick+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	2000011c 	.word	0x2000011c

08000e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e24:	f7ff ffee 	bl	8000e04 <HAL_GetTick>
 8000e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e34:	d005      	beq.n	8000e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <HAL_Delay+0x44>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4413      	add	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e42:	bf00      	nop
 8000e44:	f7ff ffde 	bl	8000e04 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d8f7      	bhi.n	8000e44 <HAL_Delay+0x28>
  {
  }
}
 8000e54:	bf00      	nop
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000008 	.word	0x20000008

08000e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7a:	68ba      	ldr	r2, [r7, #8]
 8000e7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e80:	4013      	ands	r3, r2
 8000e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e96:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	60d3      	str	r3, [r2, #12]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	f003 0307 	and.w	r3, r3, #7
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	db0a      	blt.n	8000ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	490c      	ldr	r1, [pc, #48]	; (8000f14 <__NVIC_SetPriority+0x4c>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	0112      	lsls	r2, r2, #4
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	440b      	add	r3, r1
 8000eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef0:	e00a      	b.n	8000f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4908      	ldr	r1, [pc, #32]	; (8000f18 <__NVIC_SetPriority+0x50>)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	3b04      	subs	r3, #4
 8000f00:	0112      	lsls	r2, r2, #4
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	440b      	add	r3, r1
 8000f06:	761a      	strb	r2, [r3, #24]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000e100 	.word	0xe000e100
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f1c3 0307 	rsb	r3, r3, #7
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	bf28      	it	cs
 8000f3a:	2304      	movcs	r3, #4
 8000f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3304      	adds	r3, #4
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d902      	bls.n	8000f4c <NVIC_EncodePriority+0x30>
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3b03      	subs	r3, #3
 8000f4a:	e000      	b.n	8000f4e <NVIC_EncodePriority+0x32>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f64:	f04f 31ff 	mov.w	r1, #4294967295
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	43d9      	mvns	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	4313      	orrs	r3, r2
         );
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3724      	adds	r7, #36	; 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f94:	d301      	bcc.n	8000f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00f      	b.n	8000fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <SysTick_Config+0x40>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fa2:	210f      	movs	r1, #15
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f7ff ff8e 	bl	8000ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <SysTick_Config+0x40>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb2:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <SysTick_Config+0x40>)
 8000fb4:	2207      	movs	r2, #7
 8000fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	e000e010 	.word	0xe000e010

08000fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ff47 	bl	8000e64 <__NVIC_SetPriorityGrouping>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b086      	sub	sp, #24
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff0:	f7ff ff5c 	bl	8000eac <__NVIC_GetPriorityGrouping>
 8000ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	6978      	ldr	r0, [r7, #20]
 8000ffc:	f7ff ff8e 	bl	8000f1c <NVIC_EncodePriority>
 8001000:	4602      	mov	r2, r0
 8001002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff5d 	bl	8000ec8 <__NVIC_SetPriority>
}
 800100e:	bf00      	nop
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ffb0 	bl	8000f84 <SysTick_Config>
 8001024:	4603      	mov	r3, r0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
 800104a:	e159      	b.n	8001300 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800104c:	2201      	movs	r2, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	429a      	cmp	r2, r3
 8001066:	f040 8148 	bne.w	80012fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	2b01      	cmp	r3, #1
 8001074:	d005      	beq.n	8001082 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107e:	2b02      	cmp	r3, #2
 8001080:	d130      	bne.n	80010e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	2203      	movs	r2, #3
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b8:	2201      	movs	r2, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	091b      	lsrs	r3, r3, #4
 80010ce:	f003 0201 	and.w	r2, r3, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b03      	cmp	r3, #3
 80010ee:	d017      	beq.n	8001120 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d123      	bne.n	8001174 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	08da      	lsrs	r2, r3, #3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3208      	adds	r2, #8
 8001134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	220f      	movs	r2, #15
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	691a      	ldr	r2, [r3, #16]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	08da      	lsrs	r2, r3, #3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3208      	adds	r2, #8
 800116e:	69b9      	ldr	r1, [r7, #24]
 8001170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	2203      	movs	r2, #3
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0203 	and.w	r2, r3, #3
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 80a2 	beq.w	80012fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b57      	ldr	r3, [pc, #348]	; (8001318 <HAL_GPIO_Init+0x2e8>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	4a56      	ldr	r2, [pc, #344]	; (8001318 <HAL_GPIO_Init+0x2e8>)
 80011c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c4:	6453      	str	r3, [r2, #68]	; 0x44
 80011c6:	4b54      	ldr	r3, [pc, #336]	; (8001318 <HAL_GPIO_Init+0x2e8>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011d2:	4a52      	ldr	r2, [pc, #328]	; (800131c <HAL_GPIO_Init+0x2ec>)
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	3302      	adds	r3, #2
 80011da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	220f      	movs	r2, #15
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a49      	ldr	r2, [pc, #292]	; (8001320 <HAL_GPIO_Init+0x2f0>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d019      	beq.n	8001232 <HAL_GPIO_Init+0x202>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a48      	ldr	r2, [pc, #288]	; (8001324 <HAL_GPIO_Init+0x2f4>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d013      	beq.n	800122e <HAL_GPIO_Init+0x1fe>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a47      	ldr	r2, [pc, #284]	; (8001328 <HAL_GPIO_Init+0x2f8>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d00d      	beq.n	800122a <HAL_GPIO_Init+0x1fa>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a46      	ldr	r2, [pc, #280]	; (800132c <HAL_GPIO_Init+0x2fc>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d007      	beq.n	8001226 <HAL_GPIO_Init+0x1f6>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a45      	ldr	r2, [pc, #276]	; (8001330 <HAL_GPIO_Init+0x300>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d101      	bne.n	8001222 <HAL_GPIO_Init+0x1f2>
 800121e:	2304      	movs	r3, #4
 8001220:	e008      	b.n	8001234 <HAL_GPIO_Init+0x204>
 8001222:	2307      	movs	r3, #7
 8001224:	e006      	b.n	8001234 <HAL_GPIO_Init+0x204>
 8001226:	2303      	movs	r3, #3
 8001228:	e004      	b.n	8001234 <HAL_GPIO_Init+0x204>
 800122a:	2302      	movs	r3, #2
 800122c:	e002      	b.n	8001234 <HAL_GPIO_Init+0x204>
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <HAL_GPIO_Init+0x204>
 8001232:	2300      	movs	r3, #0
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	f002 0203 	and.w	r2, r2, #3
 800123a:	0092      	lsls	r2, r2, #2
 800123c:	4093      	lsls	r3, r2
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001244:	4935      	ldr	r1, [pc, #212]	; (800131c <HAL_GPIO_Init+0x2ec>)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	089b      	lsrs	r3, r3, #2
 800124a:	3302      	adds	r3, #2
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001252:	4b38      	ldr	r3, [pc, #224]	; (8001334 <HAL_GPIO_Init+0x304>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001276:	4a2f      	ldr	r2, [pc, #188]	; (8001334 <HAL_GPIO_Init+0x304>)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800127c:	4b2d      	ldr	r3, [pc, #180]	; (8001334 <HAL_GPIO_Init+0x304>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012a0:	4a24      	ldr	r2, [pc, #144]	; (8001334 <HAL_GPIO_Init+0x304>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012a6:	4b23      	ldr	r3, [pc, #140]	; (8001334 <HAL_GPIO_Init+0x304>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ca:	4a1a      	ldr	r2, [pc, #104]	; (8001334 <HAL_GPIO_Init+0x304>)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012d0:	4b18      	ldr	r3, [pc, #96]	; (8001334 <HAL_GPIO_Init+0x304>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012f4:	4a0f      	ldr	r2, [pc, #60]	; (8001334 <HAL_GPIO_Init+0x304>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3301      	adds	r3, #1
 80012fe:	61fb      	str	r3, [r7, #28]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	2b0f      	cmp	r3, #15
 8001304:	f67f aea2 	bls.w	800104c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	3724      	adds	r7, #36	; 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40013800 	.word	0x40013800
 8001320:	40020000 	.word	0x40020000
 8001324:	40020400 	.word	0x40020400
 8001328:	40020800 	.word	0x40020800
 800132c:	40020c00 	.word	0x40020c00
 8001330:	40021000 	.word	0x40021000
 8001334:	40013c00 	.word	0x40013c00

08001338 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691a      	ldr	r2, [r3, #16]
 8001348:	887b      	ldrh	r3, [r7, #2]
 800134a:	4013      	ands	r3, r2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d002      	beq.n	8001356 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001350:	2301      	movs	r3, #1
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	e001      	b.n	800135a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001356:	2300      	movs	r3, #0
 8001358:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800135a:	7bfb      	ldrb	r3, [r7, #15]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
 8001374:	4613      	mov	r3, r2
 8001376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001378:	787b      	ldrb	r3, [r7, #1]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800137e:	887a      	ldrh	r2, [r7, #2]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001384:	e003      	b.n	800138e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001386:	887b      	ldrh	r3, [r7, #2]
 8001388:	041a      	lsls	r2, r3, #16
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	619a      	str	r2, [r3, #24]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e267      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d075      	beq.n	80014a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ba:	4b88      	ldr	r3, [pc, #544]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	d00c      	beq.n	80013e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013c6:	4b85      	ldr	r3, [pc, #532]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d112      	bne.n	80013f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013d2:	4b82      	ldr	r3, [pc, #520]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013de:	d10b      	bne.n	80013f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e0:	4b7e      	ldr	r3, [pc, #504]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d05b      	beq.n	80014a4 <HAL_RCC_OscConfig+0x108>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d157      	bne.n	80014a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e242      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001400:	d106      	bne.n	8001410 <HAL_RCC_OscConfig+0x74>
 8001402:	4b76      	ldr	r3, [pc, #472]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a75      	ldr	r2, [pc, #468]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	e01d      	b.n	800144c <HAL_RCC_OscConfig+0xb0>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001418:	d10c      	bne.n	8001434 <HAL_RCC_OscConfig+0x98>
 800141a:	4b70      	ldr	r3, [pc, #448]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a6f      	ldr	r2, [pc, #444]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	4b6d      	ldr	r3, [pc, #436]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a6c      	ldr	r2, [pc, #432]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 800142c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	e00b      	b.n	800144c <HAL_RCC_OscConfig+0xb0>
 8001434:	4b69      	ldr	r3, [pc, #420]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a68      	ldr	r2, [pc, #416]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 800143a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	4b66      	ldr	r3, [pc, #408]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a65      	ldr	r2, [pc, #404]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800144a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d013      	beq.n	800147c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fcd6 	bl	8000e04 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800145c:	f7ff fcd2 	bl	8000e04 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b64      	cmp	r3, #100	; 0x64
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e207      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146e:	4b5b      	ldr	r3, [pc, #364]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0xc0>
 800147a:	e014      	b.n	80014a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff fcc2 	bl	8000e04 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001484:	f7ff fcbe 	bl	8000e04 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b64      	cmp	r3, #100	; 0x64
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e1f3      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001496:	4b51      	ldr	r3, [pc, #324]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0xe8>
 80014a2:	e000      	b.n	80014a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d063      	beq.n	800157a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014b2:	4b4a      	ldr	r3, [pc, #296]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00b      	beq.n	80014d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014be:	4b47      	ldr	r3, [pc, #284]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d11c      	bne.n	8001504 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ca:	4b44      	ldr	r3, [pc, #272]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d116      	bne.n	8001504 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d6:	4b41      	ldr	r3, [pc, #260]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d005      	beq.n	80014ee <HAL_RCC_OscConfig+0x152>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d001      	beq.n	80014ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e1c7      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ee:	4b3b      	ldr	r3, [pc, #236]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	4937      	ldr	r1, [pc, #220]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001502:	e03a      	b.n	800157a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d020      	beq.n	800154e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800150c:	4b34      	ldr	r3, [pc, #208]	; (80015e0 <HAL_RCC_OscConfig+0x244>)
 800150e:	2201      	movs	r2, #1
 8001510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001512:	f7ff fc77 	bl	8000e04 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800151a:	f7ff fc73 	bl	8000e04 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e1a8      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152c:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001538:	4b28      	ldr	r3, [pc, #160]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	4925      	ldr	r1, [pc, #148]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001548:	4313      	orrs	r3, r2
 800154a:	600b      	str	r3, [r1, #0]
 800154c:	e015      	b.n	800157a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154e:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <HAL_RCC_OscConfig+0x244>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001554:	f7ff fc56 	bl	8000e04 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800155c:	f7ff fc52 	bl	8000e04 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e187      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156e:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	2b00      	cmp	r3, #0
 8001584:	d036      	beq.n	80015f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d016      	beq.n	80015bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_RCC_OscConfig+0x248>)
 8001590:	2201      	movs	r2, #1
 8001592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001594:	f7ff fc36 	bl	8000e04 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800159c:	f7ff fc32 	bl	8000e04 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e167      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80015b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0x200>
 80015ba:	e01b      	b.n	80015f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_RCC_OscConfig+0x248>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c2:	f7ff fc1f 	bl	8000e04 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c8:	e00e      	b.n	80015e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ca:	f7ff fc1b 	bl	8000e04 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d907      	bls.n	80015e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e150      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
 80015dc:	40023800 	.word	0x40023800
 80015e0:	42470000 	.word	0x42470000
 80015e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e8:	4b88      	ldr	r3, [pc, #544]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80015ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1ea      	bne.n	80015ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 8097 	beq.w	8001730 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001606:	4b81      	ldr	r3, [pc, #516]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10f      	bne.n	8001632 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	4b7d      	ldr	r3, [pc, #500]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	4a7c      	ldr	r2, [pc, #496]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001620:	6413      	str	r3, [r2, #64]	; 0x40
 8001622:	4b7a      	ldr	r3, [pc, #488]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800162e:	2301      	movs	r3, #1
 8001630:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001632:	4b77      	ldr	r3, [pc, #476]	; (8001810 <HAL_RCC_OscConfig+0x474>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163a:	2b00      	cmp	r3, #0
 800163c:	d118      	bne.n	8001670 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800163e:	4b74      	ldr	r3, [pc, #464]	; (8001810 <HAL_RCC_OscConfig+0x474>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a73      	ldr	r2, [pc, #460]	; (8001810 <HAL_RCC_OscConfig+0x474>)
 8001644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800164a:	f7ff fbdb 	bl	8000e04 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001652:	f7ff fbd7 	bl	8000e04 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e10c      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001664:	4b6a      	ldr	r3, [pc, #424]	; (8001810 <HAL_RCC_OscConfig+0x474>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d106      	bne.n	8001686 <HAL_RCC_OscConfig+0x2ea>
 8001678:	4b64      	ldr	r3, [pc, #400]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800167a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167c:	4a63      	ldr	r2, [pc, #396]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6713      	str	r3, [r2, #112]	; 0x70
 8001684:	e01c      	b.n	80016c0 <HAL_RCC_OscConfig+0x324>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b05      	cmp	r3, #5
 800168c:	d10c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x30c>
 800168e:	4b5f      	ldr	r3, [pc, #380]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001692:	4a5e      	ldr	r2, [pc, #376]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	6713      	str	r3, [r2, #112]	; 0x70
 800169a:	4b5c      	ldr	r3, [pc, #368]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800169c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169e:	4a5b      	ldr	r2, [pc, #364]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6713      	str	r3, [r2, #112]	; 0x70
 80016a6:	e00b      	b.n	80016c0 <HAL_RCC_OscConfig+0x324>
 80016a8:	4b58      	ldr	r3, [pc, #352]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ac:	4a57      	ldr	r2, [pc, #348]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016ae:	f023 0301 	bic.w	r3, r3, #1
 80016b2:	6713      	str	r3, [r2, #112]	; 0x70
 80016b4:	4b55      	ldr	r3, [pc, #340]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b8:	4a54      	ldr	r2, [pc, #336]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016ba:	f023 0304 	bic.w	r3, r3, #4
 80016be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d015      	beq.n	80016f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c8:	f7ff fb9c 	bl	8000e04 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ce:	e00a      	b.n	80016e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d0:	f7ff fb98 	bl	8000e04 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	; 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e0cb      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e6:	4b49      	ldr	r3, [pc, #292]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0ee      	beq.n	80016d0 <HAL_RCC_OscConfig+0x334>
 80016f2:	e014      	b.n	800171e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f4:	f7ff fb86 	bl	8000e04 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fa:	e00a      	b.n	8001712 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016fc:	f7ff fb82 	bl	8000e04 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	f241 3288 	movw	r2, #5000	; 0x1388
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e0b5      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001712:	4b3e      	ldr	r3, [pc, #248]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1ee      	bne.n	80016fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800171e:	7dfb      	ldrb	r3, [r7, #23]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d105      	bne.n	8001730 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001724:	4b39      	ldr	r3, [pc, #228]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	4a38      	ldr	r2, [pc, #224]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800172a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800172e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 80a1 	beq.w	800187c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800173a:	4b34      	ldr	r3, [pc, #208]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	2b08      	cmp	r3, #8
 8001744:	d05c      	beq.n	8001800 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d141      	bne.n	80017d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174e:	4b31      	ldr	r3, [pc, #196]	; (8001814 <HAL_RCC_OscConfig+0x478>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7ff fb56 	bl	8000e04 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff fb52 	bl	8000e04 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e087      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176e:	4b27      	ldr	r3, [pc, #156]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69da      	ldr	r2, [r3, #28]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	019b      	lsls	r3, r3, #6
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001790:	085b      	lsrs	r3, r3, #1
 8001792:	3b01      	subs	r3, #1
 8001794:	041b      	lsls	r3, r3, #16
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179c:	061b      	lsls	r3, r3, #24
 800179e:	491b      	ldr	r1, [pc, #108]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017a4:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <HAL_RCC_OscConfig+0x478>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017aa:	f7ff fb2b 	bl	8000e04 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b2:	f7ff fb27 	bl	8000e04 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e05c      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x416>
 80017d0:	e054      	b.n	800187c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <HAL_RCC_OscConfig+0x478>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7ff fb14 	bl	8000e04 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e0:	f7ff fb10 	bl	8000e04 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e045      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x444>
 80017fe:	e03d      	b.n	800187c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d107      	bne.n	8001818 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e038      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
 800180c:	40023800 	.word	0x40023800
 8001810:	40007000 	.word	0x40007000
 8001814:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001818:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <HAL_RCC_OscConfig+0x4ec>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d028      	beq.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001830:	429a      	cmp	r2, r3
 8001832:	d121      	bne.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183e:	429a      	cmp	r2, r3
 8001840:	d11a      	bne.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001848:	4013      	ands	r3, r2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800184e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001850:	4293      	cmp	r3, r2
 8001852:	d111      	bne.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185e:	085b      	lsrs	r3, r3, #1
 8001860:	3b01      	subs	r3, #1
 8001862:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d107      	bne.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001872:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e000      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800

0800188c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0cc      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018a0:	4b68      	ldr	r3, [pc, #416]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d90c      	bls.n	80018c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ae:	4b65      	ldr	r3, [pc, #404]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b6:	4b63      	ldr	r3, [pc, #396]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0b8      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d020      	beq.n	8001916 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018e0:	4b59      	ldr	r3, [pc, #356]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	4a58      	ldr	r2, [pc, #352]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018f8:	4b53      	ldr	r3, [pc, #332]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	4a52      	ldr	r2, [pc, #328]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001902:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001904:	4b50      	ldr	r3, [pc, #320]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	494d      	ldr	r1, [pc, #308]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	4313      	orrs	r3, r2
 8001914:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d044      	beq.n	80019ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d107      	bne.n	800193a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192a:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d119      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e07f      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d003      	beq.n	800194a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001946:	2b03      	cmp	r3, #3
 8001948:	d107      	bne.n	800195a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194a:	4b3f      	ldr	r3, [pc, #252]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d109      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e06f      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195a:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e067      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800196a:	4b37      	ldr	r3, [pc, #220]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f023 0203 	bic.w	r2, r3, #3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	4934      	ldr	r1, [pc, #208]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001978:	4313      	orrs	r3, r2
 800197a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800197c:	f7ff fa42 	bl	8000e04 <HAL_GetTick>
 8001980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001982:	e00a      	b.n	800199a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001984:	f7ff fa3e 	bl	8000e04 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001992:	4293      	cmp	r3, r2
 8001994:	d901      	bls.n	800199a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e04f      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199a:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 020c 	and.w	r2, r3, #12
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d1eb      	bne.n	8001984 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019ac:	4b25      	ldr	r3, [pc, #148]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d20c      	bcs.n	80019d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ba:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c2:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e032      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d008      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e0:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	4916      	ldr	r1, [pc, #88]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d009      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	490e      	ldr	r1, [pc, #56]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a12:	f000 f821 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 8001a16:	4602      	mov	r2, r0
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	490a      	ldr	r1, [pc, #40]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 8001a24:	5ccb      	ldrb	r3, [r1, r3]
 8001a26:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2a:	4a09      	ldr	r2, [pc, #36]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_RCC_ClockConfig+0x1c8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff f9a2 	bl	8000d7c <HAL_InitTick>

  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023c00 	.word	0x40023c00
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	0800396c 	.word	0x0800396c
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000004 	.word	0x20000004

08001a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a5c:	b090      	sub	sp, #64	; 0x40
 8001a5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	637b      	str	r3, [r7, #52]	; 0x34
 8001a64:	2300      	movs	r3, #0
 8001a66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a68:	2300      	movs	r3, #0
 8001a6a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a70:	4b59      	ldr	r3, [pc, #356]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d00d      	beq.n	8001a98 <HAL_RCC_GetSysClockFreq+0x40>
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	f200 80a1 	bhi.w	8001bc4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d002      	beq.n	8001a8c <HAL_RCC_GetSysClockFreq+0x34>
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d003      	beq.n	8001a92 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a8a:	e09b      	b.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a8c:	4b53      	ldr	r3, [pc, #332]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x184>)
 8001a8e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001a90:	e09b      	b.n	8001bca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a92:	4b53      	ldr	r3, [pc, #332]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a96:	e098      	b.n	8001bca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a98:	4b4f      	ldr	r3, [pc, #316]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001aa0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aa2:	4b4d      	ldr	r3, [pc, #308]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d028      	beq.n	8001b00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aae:	4b4a      	ldr	r3, [pc, #296]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	099b      	lsrs	r3, r3, #6
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	623b      	str	r3, [r7, #32]
 8001ab8:	627a      	str	r2, [r7, #36]	; 0x24
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4b47      	ldr	r3, [pc, #284]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ac4:	fb03 f201 	mul.w	r2, r3, r1
 8001ac8:	2300      	movs	r3, #0
 8001aca:	fb00 f303 	mul.w	r3, r0, r3
 8001ace:	4413      	add	r3, r2
 8001ad0:	4a43      	ldr	r2, [pc, #268]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ad2:	fba0 1202 	umull	r1, r2, r0, r2
 8001ad6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ad8:	460a      	mov	r2, r1
 8001ada:	62ba      	str	r2, [r7, #40]	; 0x28
 8001adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ade:	4413      	add	r3, r2
 8001ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	61bb      	str	r3, [r7, #24]
 8001ae8:	61fa      	str	r2, [r7, #28]
 8001aea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001af2:	f7fe fbc5 	bl	8000280 <__aeabi_uldivmod>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4613      	mov	r3, r2
 8001afc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001afe:	e053      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b00:	4b35      	ldr	r3, [pc, #212]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	099b      	lsrs	r3, r3, #6
 8001b06:	2200      	movs	r2, #0
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	617a      	str	r2, [r7, #20]
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b12:	f04f 0b00 	mov.w	fp, #0
 8001b16:	4652      	mov	r2, sl
 8001b18:	465b      	mov	r3, fp
 8001b1a:	f04f 0000 	mov.w	r0, #0
 8001b1e:	f04f 0100 	mov.w	r1, #0
 8001b22:	0159      	lsls	r1, r3, #5
 8001b24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b28:	0150      	lsls	r0, r2, #5
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	ebb2 080a 	subs.w	r8, r2, sl
 8001b32:	eb63 090b 	sbc.w	r9, r3, fp
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	f04f 0300 	mov.w	r3, #0
 8001b3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b4a:	ebb2 0408 	subs.w	r4, r2, r8
 8001b4e:	eb63 0509 	sbc.w	r5, r3, r9
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	00eb      	lsls	r3, r5, #3
 8001b5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b60:	00e2      	lsls	r2, r4, #3
 8001b62:	4614      	mov	r4, r2
 8001b64:	461d      	mov	r5, r3
 8001b66:	eb14 030a 	adds.w	r3, r4, sl
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	eb45 030b 	adc.w	r3, r5, fp
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b7e:	4629      	mov	r1, r5
 8001b80:	028b      	lsls	r3, r1, #10
 8001b82:	4621      	mov	r1, r4
 8001b84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b88:	4621      	mov	r1, r4
 8001b8a:	028a      	lsls	r2, r1, #10
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b92:	2200      	movs	r2, #0
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	60fa      	str	r2, [r7, #12]
 8001b98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b9c:	f7fe fb70 	bl	8000280 <__aeabi_uldivmod>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	0c1b      	lsrs	r3, r3, #16
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001bb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001bc2:	e002      	b.n	8001bca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x184>)
 8001bc6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001bc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3740      	adds	r7, #64	; 0x40
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	00f42400 	.word	0x00f42400
 8001be0:	017d7840 	.word	0x017d7840

08001be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001be8:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20000000 	.word	0x20000000

08001bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c00:	f7ff fff0 	bl	8001be4 <HAL_RCC_GetHCLKFreq>
 8001c04:	4602      	mov	r2, r0
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	0a9b      	lsrs	r3, r3, #10
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	4903      	ldr	r1, [pc, #12]	; (8001c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c12:	5ccb      	ldrb	r3, [r1, r3]
 8001c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	0800397c 	.word	0x0800397c

08001c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c28:	f7ff ffdc 	bl	8001be4 <HAL_RCC_GetHCLKFreq>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	0b5b      	lsrs	r3, r3, #13
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	4903      	ldr	r1, [pc, #12]	; (8001c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c3a:	5ccb      	ldrb	r3, [r1, r3]
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40023800 	.word	0x40023800
 8001c48:	0800397c 	.word	0x0800397c

08001c4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e041      	b.n	8001ce2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d106      	bne.n	8001c78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7fe fef4 	bl	8000a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3304      	adds	r3, #4
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	f000 f950 	bl	8001f30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d001      	beq.n	8001d04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e03c      	b.n	8001d7e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2202      	movs	r2, #2
 8001d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a1e      	ldr	r2, [pc, #120]	; (8001d8c <HAL_TIM_Base_Start+0xa0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d018      	beq.n	8001d48 <HAL_TIM_Base_Start+0x5c>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d1e:	d013      	beq.n	8001d48 <HAL_TIM_Base_Start+0x5c>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a1a      	ldr	r2, [pc, #104]	; (8001d90 <HAL_TIM_Base_Start+0xa4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d00e      	beq.n	8001d48 <HAL_TIM_Base_Start+0x5c>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a19      	ldr	r2, [pc, #100]	; (8001d94 <HAL_TIM_Base_Start+0xa8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d009      	beq.n	8001d48 <HAL_TIM_Base_Start+0x5c>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a17      	ldr	r2, [pc, #92]	; (8001d98 <HAL_TIM_Base_Start+0xac>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d004      	beq.n	8001d48 <HAL_TIM_Base_Start+0x5c>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a16      	ldr	r2, [pc, #88]	; (8001d9c <HAL_TIM_Base_Start+0xb0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d111      	bne.n	8001d6c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b06      	cmp	r3, #6
 8001d58:	d010      	beq.n	8001d7c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 0201 	orr.w	r2, r2, #1
 8001d68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d6a:	e007      	b.n	8001d7c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0201 	orr.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40010000 	.word	0x40010000
 8001d90:	40000400 	.word	0x40000400
 8001d94:	40000800 	.word	0x40000800
 8001d98:	40000c00 	.word	0x40000c00
 8001d9c:	40014000 	.word	0x40014000

08001da0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <HAL_TIM_ConfigClockSource+0x1c>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e0b4      	b.n	8001f26 <HAL_TIM_ConfigClockSource+0x186>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001dda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001de2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001df4:	d03e      	beq.n	8001e74 <HAL_TIM_ConfigClockSource+0xd4>
 8001df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dfa:	f200 8087 	bhi.w	8001f0c <HAL_TIM_ConfigClockSource+0x16c>
 8001dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e02:	f000 8086 	beq.w	8001f12 <HAL_TIM_ConfigClockSource+0x172>
 8001e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e0a:	d87f      	bhi.n	8001f0c <HAL_TIM_ConfigClockSource+0x16c>
 8001e0c:	2b70      	cmp	r3, #112	; 0x70
 8001e0e:	d01a      	beq.n	8001e46 <HAL_TIM_ConfigClockSource+0xa6>
 8001e10:	2b70      	cmp	r3, #112	; 0x70
 8001e12:	d87b      	bhi.n	8001f0c <HAL_TIM_ConfigClockSource+0x16c>
 8001e14:	2b60      	cmp	r3, #96	; 0x60
 8001e16:	d050      	beq.n	8001eba <HAL_TIM_ConfigClockSource+0x11a>
 8001e18:	2b60      	cmp	r3, #96	; 0x60
 8001e1a:	d877      	bhi.n	8001f0c <HAL_TIM_ConfigClockSource+0x16c>
 8001e1c:	2b50      	cmp	r3, #80	; 0x50
 8001e1e:	d03c      	beq.n	8001e9a <HAL_TIM_ConfigClockSource+0xfa>
 8001e20:	2b50      	cmp	r3, #80	; 0x50
 8001e22:	d873      	bhi.n	8001f0c <HAL_TIM_ConfigClockSource+0x16c>
 8001e24:	2b40      	cmp	r3, #64	; 0x40
 8001e26:	d058      	beq.n	8001eda <HAL_TIM_ConfigClockSource+0x13a>
 8001e28:	2b40      	cmp	r3, #64	; 0x40
 8001e2a:	d86f      	bhi.n	8001f0c <HAL_TIM_ConfigClockSource+0x16c>
 8001e2c:	2b30      	cmp	r3, #48	; 0x30
 8001e2e:	d064      	beq.n	8001efa <HAL_TIM_ConfigClockSource+0x15a>
 8001e30:	2b30      	cmp	r3, #48	; 0x30
 8001e32:	d86b      	bhi.n	8001f0c <HAL_TIM_ConfigClockSource+0x16c>
 8001e34:	2b20      	cmp	r3, #32
 8001e36:	d060      	beq.n	8001efa <HAL_TIM_ConfigClockSource+0x15a>
 8001e38:	2b20      	cmp	r3, #32
 8001e3a:	d867      	bhi.n	8001f0c <HAL_TIM_ConfigClockSource+0x16c>
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d05c      	beq.n	8001efa <HAL_TIM_ConfigClockSource+0x15a>
 8001e40:	2b10      	cmp	r3, #16
 8001e42:	d05a      	beq.n	8001efa <HAL_TIM_ConfigClockSource+0x15a>
 8001e44:	e062      	b.n	8001f0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6818      	ldr	r0, [r3, #0]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	6899      	ldr	r1, [r3, #8]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f000 f965 	bl	8002124 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	609a      	str	r2, [r3, #8]
      break;
 8001e72:	e04f      	b.n	8001f14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6818      	ldr	r0, [r3, #0]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	6899      	ldr	r1, [r3, #8]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f000 f94e 	bl	8002124 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e96:	609a      	str	r2, [r3, #8]
      break;
 8001e98:	e03c      	b.n	8001f14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6818      	ldr	r0, [r3, #0]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	6859      	ldr	r1, [r3, #4]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	f000 f8c2 	bl	8002030 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2150      	movs	r1, #80	; 0x50
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 f91b 	bl	80020ee <TIM_ITRx_SetConfig>
      break;
 8001eb8:	e02c      	b.n	8001f14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6818      	ldr	r0, [r3, #0]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	6859      	ldr	r1, [r3, #4]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	f000 f8e1 	bl	800208e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2160      	movs	r1, #96	; 0x60
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 f90b 	bl	80020ee <TIM_ITRx_SetConfig>
      break;
 8001ed8:	e01c      	b.n	8001f14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6818      	ldr	r0, [r3, #0]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	6859      	ldr	r1, [r3, #4]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	f000 f8a2 	bl	8002030 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2140      	movs	r1, #64	; 0x40
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 f8fb 	bl	80020ee <TIM_ITRx_SetConfig>
      break;
 8001ef8:	e00c      	b.n	8001f14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4619      	mov	r1, r3
 8001f04:	4610      	mov	r0, r2
 8001f06:	f000 f8f2 	bl	80020ee <TIM_ITRx_SetConfig>
      break;
 8001f0a:	e003      	b.n	8001f14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f10:	e000      	b.n	8001f14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001f12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a34      	ldr	r2, [pc, #208]	; (8002014 <TIM_Base_SetConfig+0xe4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d00f      	beq.n	8001f68 <TIM_Base_SetConfig+0x38>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f4e:	d00b      	beq.n	8001f68 <TIM_Base_SetConfig+0x38>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a31      	ldr	r2, [pc, #196]	; (8002018 <TIM_Base_SetConfig+0xe8>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d007      	beq.n	8001f68 <TIM_Base_SetConfig+0x38>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a30      	ldr	r2, [pc, #192]	; (800201c <TIM_Base_SetConfig+0xec>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d003      	beq.n	8001f68 <TIM_Base_SetConfig+0x38>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a2f      	ldr	r2, [pc, #188]	; (8002020 <TIM_Base_SetConfig+0xf0>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d108      	bne.n	8001f7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a25      	ldr	r2, [pc, #148]	; (8002014 <TIM_Base_SetConfig+0xe4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d01b      	beq.n	8001fba <TIM_Base_SetConfig+0x8a>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f88:	d017      	beq.n	8001fba <TIM_Base_SetConfig+0x8a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a22      	ldr	r2, [pc, #136]	; (8002018 <TIM_Base_SetConfig+0xe8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d013      	beq.n	8001fba <TIM_Base_SetConfig+0x8a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a21      	ldr	r2, [pc, #132]	; (800201c <TIM_Base_SetConfig+0xec>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d00f      	beq.n	8001fba <TIM_Base_SetConfig+0x8a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a20      	ldr	r2, [pc, #128]	; (8002020 <TIM_Base_SetConfig+0xf0>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d00b      	beq.n	8001fba <TIM_Base_SetConfig+0x8a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a1f      	ldr	r2, [pc, #124]	; (8002024 <TIM_Base_SetConfig+0xf4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d007      	beq.n	8001fba <TIM_Base_SetConfig+0x8a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a1e      	ldr	r2, [pc, #120]	; (8002028 <TIM_Base_SetConfig+0xf8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d003      	beq.n	8001fba <TIM_Base_SetConfig+0x8a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a1d      	ldr	r2, [pc, #116]	; (800202c <TIM_Base_SetConfig+0xfc>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d108      	bne.n	8001fcc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a08      	ldr	r2, [pc, #32]	; (8002014 <TIM_Base_SetConfig+0xe4>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d103      	bne.n	8002000 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	615a      	str	r2, [r3, #20]
}
 8002006:	bf00      	nop
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40010000 	.word	0x40010000
 8002018:	40000400 	.word	0x40000400
 800201c:	40000800 	.word	0x40000800
 8002020:	40000c00 	.word	0x40000c00
 8002024:	40014000 	.word	0x40014000
 8002028:	40014400 	.word	0x40014400
 800202c:	40014800 	.word	0x40014800

08002030 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002030:	b480      	push	{r7}
 8002032:	b087      	sub	sp, #28
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	f023 0201 	bic.w	r2, r3, #1
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800205a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4313      	orrs	r3, r2
 8002064:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f023 030a 	bic.w	r3, r3, #10
 800206c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	4313      	orrs	r3, r2
 8002074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	621a      	str	r2, [r3, #32]
}
 8002082:	bf00      	nop
 8002084:	371c      	adds	r7, #28
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800208e:	b480      	push	{r7}
 8002090:	b087      	sub	sp, #28
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	f023 0210 	bic.w	r2, r3, #16
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	031b      	lsls	r3, r3, #12
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80020ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	621a      	str	r2, [r3, #32]
}
 80020e2:	bf00      	nop
 80020e4:	371c      	adds	r7, #28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b085      	sub	sp, #20
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002104:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	f043 0307 	orr.w	r3, r3, #7
 8002110:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	609a      	str	r2, [r3, #8]
}
 8002118:	bf00      	nop
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002124:	b480      	push	{r7}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
 8002130:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800213e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	021a      	lsls	r2, r3, #8
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	431a      	orrs	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	4313      	orrs	r3, r2
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	4313      	orrs	r3, r2
 8002150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	609a      	str	r2, [r3, #8]
}
 8002158:	bf00      	nop
 800215a:	371c      	adds	r7, #28
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002178:	2302      	movs	r3, #2
 800217a:	e050      	b.n	800221e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2202      	movs	r2, #2
 8002188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a1c      	ldr	r2, [pc, #112]	; (800222c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d018      	beq.n	80021f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c8:	d013      	beq.n	80021f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a18      	ldr	r2, [pc, #96]	; (8002230 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d00e      	beq.n	80021f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a16      	ldr	r2, [pc, #88]	; (8002234 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d009      	beq.n	80021f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a15      	ldr	r2, [pc, #84]	; (8002238 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d004      	beq.n	80021f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a13      	ldr	r2, [pc, #76]	; (800223c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d10c      	bne.n	800220c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	4313      	orrs	r3, r2
 8002202:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40010000 	.word	0x40010000
 8002230:	40000400 	.word	0x40000400
 8002234:	40000800 	.word	0x40000800
 8002238:	40000c00 	.word	0x40000c00
 800223c:	40014000 	.word	0x40014000

08002240 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e03f      	b.n	80022d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d106      	bne.n	800226c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7fe fc1c 	bl	8000aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2224      	movs	r2, #36	; 0x24
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002282:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 f929 	bl	80024dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002298:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	695a      	ldr	r2, [r3, #20]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2220      	movs	r2, #32
 80022cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b08a      	sub	sp, #40	; 0x28
 80022de:	af02      	add	r7, sp, #8
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	603b      	str	r3, [r7, #0]
 80022e6:	4613      	mov	r3, r2
 80022e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b20      	cmp	r3, #32
 80022f8:	d17c      	bne.n	80023f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <HAL_UART_Transmit+0x2c>
 8002300:	88fb      	ldrh	r3, [r7, #6]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e075      	b.n	80023f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <HAL_UART_Transmit+0x3e>
 8002314:	2302      	movs	r3, #2
 8002316:	e06e      	b.n	80023f6 <HAL_UART_Transmit+0x11c>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2221      	movs	r2, #33	; 0x21
 800232a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800232e:	f7fe fd69 	bl	8000e04 <HAL_GetTick>
 8002332:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	88fa      	ldrh	r2, [r7, #6]
 8002338:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	88fa      	ldrh	r2, [r7, #6]
 800233e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002348:	d108      	bne.n	800235c <HAL_UART_Transmit+0x82>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d104      	bne.n	800235c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	61bb      	str	r3, [r7, #24]
 800235a:	e003      	b.n	8002364 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002360:	2300      	movs	r3, #0
 8002362:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800236c:	e02a      	b.n	80023c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	2200      	movs	r2, #0
 8002376:	2180      	movs	r1, #128	; 0x80
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 f840 	bl	80023fe <UART_WaitOnFlagUntilTimeout>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e036      	b.n	80023f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10b      	bne.n	80023a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800239c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	3302      	adds	r3, #2
 80023a2:	61bb      	str	r3, [r7, #24]
 80023a4:	e007      	b.n	80023b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	781a      	ldrb	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	3301      	adds	r3, #1
 80023b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1cf      	bne.n	800236e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2200      	movs	r2, #0
 80023d6:	2140      	movs	r1, #64	; 0x40
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 f810 	bl	80023fe <UART_WaitOnFlagUntilTimeout>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e006      	b.n	80023f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	e000      	b.n	80023f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80023f4:	2302      	movs	r3, #2
  }
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3720      	adds	r7, #32
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b090      	sub	sp, #64	; 0x40
 8002402:	af00      	add	r7, sp, #0
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	603b      	str	r3, [r7, #0]
 800240a:	4613      	mov	r3, r2
 800240c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800240e:	e050      	b.n	80024b2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002416:	d04c      	beq.n	80024b2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800241a:	2b00      	cmp	r3, #0
 800241c:	d007      	beq.n	800242e <UART_WaitOnFlagUntilTimeout+0x30>
 800241e:	f7fe fcf1 	bl	8000e04 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800242a:	429a      	cmp	r2, r3
 800242c:	d241      	bcs.n	80024b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	330c      	adds	r3, #12
 8002434:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002438:	e853 3f00 	ldrex	r3, [r3]
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002444:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	330c      	adds	r3, #12
 800244c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800244e:	637a      	str	r2, [r7, #52]	; 0x34
 8002450:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002452:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002454:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002456:	e841 2300 	strex	r3, r2, [r1]
 800245a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800245c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1e5      	bne.n	800242e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	3314      	adds	r3, #20
 8002468:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	e853 3f00 	ldrex	r3, [r3]
 8002470:	613b      	str	r3, [r7, #16]
   return(result);
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	f023 0301 	bic.w	r3, r3, #1
 8002478:	63bb      	str	r3, [r7, #56]	; 0x38
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	3314      	adds	r3, #20
 8002480:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002482:	623a      	str	r2, [r7, #32]
 8002484:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002486:	69f9      	ldr	r1, [r7, #28]
 8002488:	6a3a      	ldr	r2, [r7, #32]
 800248a:	e841 2300 	strex	r3, r2, [r1]
 800248e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1e5      	bne.n	8002462 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2220      	movs	r2, #32
 800249a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2220      	movs	r2, #32
 80024a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e00f      	b.n	80024d2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4013      	ands	r3, r2
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	429a      	cmp	r2, r3
 80024c0:	bf0c      	ite	eq
 80024c2:	2301      	moveq	r3, #1
 80024c4:	2300      	movne	r3, #0
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	461a      	mov	r2, r3
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d09f      	beq.n	8002410 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3740      	adds	r7, #64	; 0x40
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024e0:	b0c0      	sub	sp, #256	; 0x100
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80024f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f8:	68d9      	ldr	r1, [r3, #12]
 80024fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	ea40 0301 	orr.w	r3, r0, r1
 8002504:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	431a      	orrs	r2, r3
 8002514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	431a      	orrs	r2, r3
 800251c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	4313      	orrs	r3, r2
 8002524:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002534:	f021 010c 	bic.w	r1, r1, #12
 8002538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002542:	430b      	orrs	r3, r1
 8002544:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002556:	6999      	ldr	r1, [r3, #24]
 8002558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	ea40 0301 	orr.w	r3, r0, r1
 8002562:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	4b8f      	ldr	r3, [pc, #572]	; (80027a8 <UART_SetConfig+0x2cc>)
 800256c:	429a      	cmp	r2, r3
 800256e:	d005      	beq.n	800257c <UART_SetConfig+0xa0>
 8002570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	4b8d      	ldr	r3, [pc, #564]	; (80027ac <UART_SetConfig+0x2d0>)
 8002578:	429a      	cmp	r2, r3
 800257a:	d104      	bne.n	8002586 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800257c:	f7ff fb52 	bl	8001c24 <HAL_RCC_GetPCLK2Freq>
 8002580:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002584:	e003      	b.n	800258e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002586:	f7ff fb39 	bl	8001bfc <HAL_RCC_GetPCLK1Freq>
 800258a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800258e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002598:	f040 810c 	bne.w	80027b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800259c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025a0:	2200      	movs	r2, #0
 80025a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80025a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80025aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80025ae:	4622      	mov	r2, r4
 80025b0:	462b      	mov	r3, r5
 80025b2:	1891      	adds	r1, r2, r2
 80025b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80025b6:	415b      	adcs	r3, r3
 80025b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80025be:	4621      	mov	r1, r4
 80025c0:	eb12 0801 	adds.w	r8, r2, r1
 80025c4:	4629      	mov	r1, r5
 80025c6:	eb43 0901 	adc.w	r9, r3, r1
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025de:	4690      	mov	r8, r2
 80025e0:	4699      	mov	r9, r3
 80025e2:	4623      	mov	r3, r4
 80025e4:	eb18 0303 	adds.w	r3, r8, r3
 80025e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80025ec:	462b      	mov	r3, r5
 80025ee:	eb49 0303 	adc.w	r3, r9, r3
 80025f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80025f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002602:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002606:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800260a:	460b      	mov	r3, r1
 800260c:	18db      	adds	r3, r3, r3
 800260e:	653b      	str	r3, [r7, #80]	; 0x50
 8002610:	4613      	mov	r3, r2
 8002612:	eb42 0303 	adc.w	r3, r2, r3
 8002616:	657b      	str	r3, [r7, #84]	; 0x54
 8002618:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800261c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002620:	f7fd fe2e 	bl	8000280 <__aeabi_uldivmod>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4b61      	ldr	r3, [pc, #388]	; (80027b0 <UART_SetConfig+0x2d4>)
 800262a:	fba3 2302 	umull	r2, r3, r3, r2
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	011c      	lsls	r4, r3, #4
 8002632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002636:	2200      	movs	r2, #0
 8002638:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800263c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002640:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002644:	4642      	mov	r2, r8
 8002646:	464b      	mov	r3, r9
 8002648:	1891      	adds	r1, r2, r2
 800264a:	64b9      	str	r1, [r7, #72]	; 0x48
 800264c:	415b      	adcs	r3, r3
 800264e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002650:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002654:	4641      	mov	r1, r8
 8002656:	eb12 0a01 	adds.w	sl, r2, r1
 800265a:	4649      	mov	r1, r9
 800265c:	eb43 0b01 	adc.w	fp, r3, r1
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	f04f 0300 	mov.w	r3, #0
 8002668:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800266c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002670:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002674:	4692      	mov	sl, r2
 8002676:	469b      	mov	fp, r3
 8002678:	4643      	mov	r3, r8
 800267a:	eb1a 0303 	adds.w	r3, sl, r3
 800267e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002682:	464b      	mov	r3, r9
 8002684:	eb4b 0303 	adc.w	r3, fp, r3
 8002688:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800268c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002698:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800269c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80026a0:	460b      	mov	r3, r1
 80026a2:	18db      	adds	r3, r3, r3
 80026a4:	643b      	str	r3, [r7, #64]	; 0x40
 80026a6:	4613      	mov	r3, r2
 80026a8:	eb42 0303 	adc.w	r3, r2, r3
 80026ac:	647b      	str	r3, [r7, #68]	; 0x44
 80026ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80026b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80026b6:	f7fd fde3 	bl	8000280 <__aeabi_uldivmod>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	4611      	mov	r1, r2
 80026c0:	4b3b      	ldr	r3, [pc, #236]	; (80027b0 <UART_SetConfig+0x2d4>)
 80026c2:	fba3 2301 	umull	r2, r3, r3, r1
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	2264      	movs	r2, #100	; 0x64
 80026ca:	fb02 f303 	mul.w	r3, r2, r3
 80026ce:	1acb      	subs	r3, r1, r3
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80026d6:	4b36      	ldr	r3, [pc, #216]	; (80027b0 <UART_SetConfig+0x2d4>)
 80026d8:	fba3 2302 	umull	r2, r3, r3, r2
 80026dc:	095b      	lsrs	r3, r3, #5
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026e4:	441c      	add	r4, r3
 80026e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026ea:	2200      	movs	r2, #0
 80026ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80026f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80026f8:	4642      	mov	r2, r8
 80026fa:	464b      	mov	r3, r9
 80026fc:	1891      	adds	r1, r2, r2
 80026fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8002700:	415b      	adcs	r3, r3
 8002702:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002704:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002708:	4641      	mov	r1, r8
 800270a:	1851      	adds	r1, r2, r1
 800270c:	6339      	str	r1, [r7, #48]	; 0x30
 800270e:	4649      	mov	r1, r9
 8002710:	414b      	adcs	r3, r1
 8002712:	637b      	str	r3, [r7, #52]	; 0x34
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002720:	4659      	mov	r1, fp
 8002722:	00cb      	lsls	r3, r1, #3
 8002724:	4651      	mov	r1, sl
 8002726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800272a:	4651      	mov	r1, sl
 800272c:	00ca      	lsls	r2, r1, #3
 800272e:	4610      	mov	r0, r2
 8002730:	4619      	mov	r1, r3
 8002732:	4603      	mov	r3, r0
 8002734:	4642      	mov	r2, r8
 8002736:	189b      	adds	r3, r3, r2
 8002738:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800273c:	464b      	mov	r3, r9
 800273e:	460a      	mov	r2, r1
 8002740:	eb42 0303 	adc.w	r3, r2, r3
 8002744:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002754:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002758:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800275c:	460b      	mov	r3, r1
 800275e:	18db      	adds	r3, r3, r3
 8002760:	62bb      	str	r3, [r7, #40]	; 0x28
 8002762:	4613      	mov	r3, r2
 8002764:	eb42 0303 	adc.w	r3, r2, r3
 8002768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800276a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800276e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002772:	f7fd fd85 	bl	8000280 <__aeabi_uldivmod>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <UART_SetConfig+0x2d4>)
 800277c:	fba3 1302 	umull	r1, r3, r3, r2
 8002780:	095b      	lsrs	r3, r3, #5
 8002782:	2164      	movs	r1, #100	; 0x64
 8002784:	fb01 f303 	mul.w	r3, r1, r3
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	3332      	adds	r3, #50	; 0x32
 800278e:	4a08      	ldr	r2, [pc, #32]	; (80027b0 <UART_SetConfig+0x2d4>)
 8002790:	fba2 2303 	umull	r2, r3, r2, r3
 8002794:	095b      	lsrs	r3, r3, #5
 8002796:	f003 0207 	and.w	r2, r3, #7
 800279a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4422      	add	r2, r4
 80027a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80027a4:	e105      	b.n	80029b2 <UART_SetConfig+0x4d6>
 80027a6:	bf00      	nop
 80027a8:	40011000 	.word	0x40011000
 80027ac:	40011400 	.word	0x40011400
 80027b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027b8:	2200      	movs	r2, #0
 80027ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80027be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80027c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80027c6:	4642      	mov	r2, r8
 80027c8:	464b      	mov	r3, r9
 80027ca:	1891      	adds	r1, r2, r2
 80027cc:	6239      	str	r1, [r7, #32]
 80027ce:	415b      	adcs	r3, r3
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
 80027d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027d6:	4641      	mov	r1, r8
 80027d8:	1854      	adds	r4, r2, r1
 80027da:	4649      	mov	r1, r9
 80027dc:	eb43 0501 	adc.w	r5, r3, r1
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	f04f 0300 	mov.w	r3, #0
 80027e8:	00eb      	lsls	r3, r5, #3
 80027ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027ee:	00e2      	lsls	r2, r4, #3
 80027f0:	4614      	mov	r4, r2
 80027f2:	461d      	mov	r5, r3
 80027f4:	4643      	mov	r3, r8
 80027f6:	18e3      	adds	r3, r4, r3
 80027f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80027fc:	464b      	mov	r3, r9
 80027fe:	eb45 0303 	adc.w	r3, r5, r3
 8002802:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002812:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002822:	4629      	mov	r1, r5
 8002824:	008b      	lsls	r3, r1, #2
 8002826:	4621      	mov	r1, r4
 8002828:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800282c:	4621      	mov	r1, r4
 800282e:	008a      	lsls	r2, r1, #2
 8002830:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002834:	f7fd fd24 	bl	8000280 <__aeabi_uldivmod>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4b60      	ldr	r3, [pc, #384]	; (80029c0 <UART_SetConfig+0x4e4>)
 800283e:	fba3 2302 	umull	r2, r3, r3, r2
 8002842:	095b      	lsrs	r3, r3, #5
 8002844:	011c      	lsls	r4, r3, #4
 8002846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800284a:	2200      	movs	r2, #0
 800284c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002850:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002854:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002858:	4642      	mov	r2, r8
 800285a:	464b      	mov	r3, r9
 800285c:	1891      	adds	r1, r2, r2
 800285e:	61b9      	str	r1, [r7, #24]
 8002860:	415b      	adcs	r3, r3
 8002862:	61fb      	str	r3, [r7, #28]
 8002864:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002868:	4641      	mov	r1, r8
 800286a:	1851      	adds	r1, r2, r1
 800286c:	6139      	str	r1, [r7, #16]
 800286e:	4649      	mov	r1, r9
 8002870:	414b      	adcs	r3, r1
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002880:	4659      	mov	r1, fp
 8002882:	00cb      	lsls	r3, r1, #3
 8002884:	4651      	mov	r1, sl
 8002886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800288a:	4651      	mov	r1, sl
 800288c:	00ca      	lsls	r2, r1, #3
 800288e:	4610      	mov	r0, r2
 8002890:	4619      	mov	r1, r3
 8002892:	4603      	mov	r3, r0
 8002894:	4642      	mov	r2, r8
 8002896:	189b      	adds	r3, r3, r2
 8002898:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800289c:	464b      	mov	r3, r9
 800289e:	460a      	mov	r2, r1
 80028a0:	eb42 0303 	adc.w	r3, r2, r3
 80028a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80028a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80028b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80028c0:	4649      	mov	r1, r9
 80028c2:	008b      	lsls	r3, r1, #2
 80028c4:	4641      	mov	r1, r8
 80028c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028ca:	4641      	mov	r1, r8
 80028cc:	008a      	lsls	r2, r1, #2
 80028ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80028d2:	f7fd fcd5 	bl	8000280 <__aeabi_uldivmod>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	4b39      	ldr	r3, [pc, #228]	; (80029c0 <UART_SetConfig+0x4e4>)
 80028dc:	fba3 1302 	umull	r1, r3, r3, r2
 80028e0:	095b      	lsrs	r3, r3, #5
 80028e2:	2164      	movs	r1, #100	; 0x64
 80028e4:	fb01 f303 	mul.w	r3, r1, r3
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	3332      	adds	r3, #50	; 0x32
 80028ee:	4a34      	ldr	r2, [pc, #208]	; (80029c0 <UART_SetConfig+0x4e4>)
 80028f0:	fba2 2303 	umull	r2, r3, r2, r3
 80028f4:	095b      	lsrs	r3, r3, #5
 80028f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028fa:	441c      	add	r4, r3
 80028fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002900:	2200      	movs	r2, #0
 8002902:	673b      	str	r3, [r7, #112]	; 0x70
 8002904:	677a      	str	r2, [r7, #116]	; 0x74
 8002906:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800290a:	4642      	mov	r2, r8
 800290c:	464b      	mov	r3, r9
 800290e:	1891      	adds	r1, r2, r2
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	415b      	adcs	r3, r3
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800291a:	4641      	mov	r1, r8
 800291c:	1851      	adds	r1, r2, r1
 800291e:	6039      	str	r1, [r7, #0]
 8002920:	4649      	mov	r1, r9
 8002922:	414b      	adcs	r3, r1
 8002924:	607b      	str	r3, [r7, #4]
 8002926:	f04f 0200 	mov.w	r2, #0
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002932:	4659      	mov	r1, fp
 8002934:	00cb      	lsls	r3, r1, #3
 8002936:	4651      	mov	r1, sl
 8002938:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800293c:	4651      	mov	r1, sl
 800293e:	00ca      	lsls	r2, r1, #3
 8002940:	4610      	mov	r0, r2
 8002942:	4619      	mov	r1, r3
 8002944:	4603      	mov	r3, r0
 8002946:	4642      	mov	r2, r8
 8002948:	189b      	adds	r3, r3, r2
 800294a:	66bb      	str	r3, [r7, #104]	; 0x68
 800294c:	464b      	mov	r3, r9
 800294e:	460a      	mov	r2, r1
 8002950:	eb42 0303 	adc.w	r3, r2, r3
 8002954:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	663b      	str	r3, [r7, #96]	; 0x60
 8002960:	667a      	str	r2, [r7, #100]	; 0x64
 8002962:	f04f 0200 	mov.w	r2, #0
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800296e:	4649      	mov	r1, r9
 8002970:	008b      	lsls	r3, r1, #2
 8002972:	4641      	mov	r1, r8
 8002974:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002978:	4641      	mov	r1, r8
 800297a:	008a      	lsls	r2, r1, #2
 800297c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002980:	f7fd fc7e 	bl	8000280 <__aeabi_uldivmod>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <UART_SetConfig+0x4e4>)
 800298a:	fba3 1302 	umull	r1, r3, r3, r2
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	2164      	movs	r1, #100	; 0x64
 8002992:	fb01 f303 	mul.w	r3, r1, r3
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	3332      	adds	r3, #50	; 0x32
 800299c:	4a08      	ldr	r2, [pc, #32]	; (80029c0 <UART_SetConfig+0x4e4>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	f003 020f 	and.w	r2, r3, #15
 80029a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4422      	add	r2, r4
 80029b0:	609a      	str	r2, [r3, #8]
}
 80029b2:	bf00      	nop
 80029b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80029b8:	46bd      	mov	sp, r7
 80029ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029be:	bf00      	nop
 80029c0:	51eb851f 	.word	0x51eb851f

080029c4 <__errno>:
 80029c4:	4b01      	ldr	r3, [pc, #4]	; (80029cc <__errno+0x8>)
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	2000000c 	.word	0x2000000c

080029d0 <__libc_init_array>:
 80029d0:	b570      	push	{r4, r5, r6, lr}
 80029d2:	4d0d      	ldr	r5, [pc, #52]	; (8002a08 <__libc_init_array+0x38>)
 80029d4:	4c0d      	ldr	r4, [pc, #52]	; (8002a0c <__libc_init_array+0x3c>)
 80029d6:	1b64      	subs	r4, r4, r5
 80029d8:	10a4      	asrs	r4, r4, #2
 80029da:	2600      	movs	r6, #0
 80029dc:	42a6      	cmp	r6, r4
 80029de:	d109      	bne.n	80029f4 <__libc_init_array+0x24>
 80029e0:	4d0b      	ldr	r5, [pc, #44]	; (8002a10 <__libc_init_array+0x40>)
 80029e2:	4c0c      	ldr	r4, [pc, #48]	; (8002a14 <__libc_init_array+0x44>)
 80029e4:	f000 ffae 	bl	8003944 <_init>
 80029e8:	1b64      	subs	r4, r4, r5
 80029ea:	10a4      	asrs	r4, r4, #2
 80029ec:	2600      	movs	r6, #0
 80029ee:	42a6      	cmp	r6, r4
 80029f0:	d105      	bne.n	80029fe <__libc_init_array+0x2e>
 80029f2:	bd70      	pop	{r4, r5, r6, pc}
 80029f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80029f8:	4798      	blx	r3
 80029fa:	3601      	adds	r6, #1
 80029fc:	e7ee      	b.n	80029dc <__libc_init_array+0xc>
 80029fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a02:	4798      	blx	r3
 8002a04:	3601      	adds	r6, #1
 8002a06:	e7f2      	b.n	80029ee <__libc_init_array+0x1e>
 8002a08:	08003a24 	.word	0x08003a24
 8002a0c:	08003a24 	.word	0x08003a24
 8002a10:	08003a24 	.word	0x08003a24
 8002a14:	08003a28 	.word	0x08003a28

08002a18 <memset>:
 8002a18:	4402      	add	r2, r0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d100      	bne.n	8002a22 <memset+0xa>
 8002a20:	4770      	bx	lr
 8002a22:	f803 1b01 	strb.w	r1, [r3], #1
 8002a26:	e7f9      	b.n	8002a1c <memset+0x4>

08002a28 <iprintf>:
 8002a28:	b40f      	push	{r0, r1, r2, r3}
 8002a2a:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <iprintf+0x2c>)
 8002a2c:	b513      	push	{r0, r1, r4, lr}
 8002a2e:	681c      	ldr	r4, [r3, #0]
 8002a30:	b124      	cbz	r4, 8002a3c <iprintf+0x14>
 8002a32:	69a3      	ldr	r3, [r4, #24]
 8002a34:	b913      	cbnz	r3, 8002a3c <iprintf+0x14>
 8002a36:	4620      	mov	r0, r4
 8002a38:	f000 f866 	bl	8002b08 <__sinit>
 8002a3c:	ab05      	add	r3, sp, #20
 8002a3e:	9a04      	ldr	r2, [sp, #16]
 8002a40:	68a1      	ldr	r1, [r4, #8]
 8002a42:	9301      	str	r3, [sp, #4]
 8002a44:	4620      	mov	r0, r4
 8002a46:	f000 f9bd 	bl	8002dc4 <_vfiprintf_r>
 8002a4a:	b002      	add	sp, #8
 8002a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a50:	b004      	add	sp, #16
 8002a52:	4770      	bx	lr
 8002a54:	2000000c 	.word	0x2000000c

08002a58 <std>:
 8002a58:	2300      	movs	r3, #0
 8002a5a:	b510      	push	{r4, lr}
 8002a5c:	4604      	mov	r4, r0
 8002a5e:	e9c0 3300 	strd	r3, r3, [r0]
 8002a62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a66:	6083      	str	r3, [r0, #8]
 8002a68:	8181      	strh	r1, [r0, #12]
 8002a6a:	6643      	str	r3, [r0, #100]	; 0x64
 8002a6c:	81c2      	strh	r2, [r0, #14]
 8002a6e:	6183      	str	r3, [r0, #24]
 8002a70:	4619      	mov	r1, r3
 8002a72:	2208      	movs	r2, #8
 8002a74:	305c      	adds	r0, #92	; 0x5c
 8002a76:	f7ff ffcf 	bl	8002a18 <memset>
 8002a7a:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <std+0x38>)
 8002a7c:	6263      	str	r3, [r4, #36]	; 0x24
 8002a7e:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <std+0x3c>)
 8002a80:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a82:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <std+0x40>)
 8002a84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a86:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <std+0x44>)
 8002a88:	6224      	str	r4, [r4, #32]
 8002a8a:	6323      	str	r3, [r4, #48]	; 0x30
 8002a8c:	bd10      	pop	{r4, pc}
 8002a8e:	bf00      	nop
 8002a90:	0800336d 	.word	0x0800336d
 8002a94:	0800338f 	.word	0x0800338f
 8002a98:	080033c7 	.word	0x080033c7
 8002a9c:	080033eb 	.word	0x080033eb

08002aa0 <_cleanup_r>:
 8002aa0:	4901      	ldr	r1, [pc, #4]	; (8002aa8 <_cleanup_r+0x8>)
 8002aa2:	f000 b8af 	b.w	8002c04 <_fwalk_reent>
 8002aa6:	bf00      	nop
 8002aa8:	080036c5 	.word	0x080036c5

08002aac <__sfmoreglue>:
 8002aac:	b570      	push	{r4, r5, r6, lr}
 8002aae:	2268      	movs	r2, #104	; 0x68
 8002ab0:	1e4d      	subs	r5, r1, #1
 8002ab2:	4355      	muls	r5, r2
 8002ab4:	460e      	mov	r6, r1
 8002ab6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002aba:	f000 f8e5 	bl	8002c88 <_malloc_r>
 8002abe:	4604      	mov	r4, r0
 8002ac0:	b140      	cbz	r0, 8002ad4 <__sfmoreglue+0x28>
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	e9c0 1600 	strd	r1, r6, [r0]
 8002ac8:	300c      	adds	r0, #12
 8002aca:	60a0      	str	r0, [r4, #8]
 8002acc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002ad0:	f7ff ffa2 	bl	8002a18 <memset>
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	bd70      	pop	{r4, r5, r6, pc}

08002ad8 <__sfp_lock_acquire>:
 8002ad8:	4801      	ldr	r0, [pc, #4]	; (8002ae0 <__sfp_lock_acquire+0x8>)
 8002ada:	f000 b8b3 	b.w	8002c44 <__retarget_lock_acquire_recursive>
 8002ade:	bf00      	nop
 8002ae0:	20000121 	.word	0x20000121

08002ae4 <__sfp_lock_release>:
 8002ae4:	4801      	ldr	r0, [pc, #4]	; (8002aec <__sfp_lock_release+0x8>)
 8002ae6:	f000 b8ae 	b.w	8002c46 <__retarget_lock_release_recursive>
 8002aea:	bf00      	nop
 8002aec:	20000121 	.word	0x20000121

08002af0 <__sinit_lock_acquire>:
 8002af0:	4801      	ldr	r0, [pc, #4]	; (8002af8 <__sinit_lock_acquire+0x8>)
 8002af2:	f000 b8a7 	b.w	8002c44 <__retarget_lock_acquire_recursive>
 8002af6:	bf00      	nop
 8002af8:	20000122 	.word	0x20000122

08002afc <__sinit_lock_release>:
 8002afc:	4801      	ldr	r0, [pc, #4]	; (8002b04 <__sinit_lock_release+0x8>)
 8002afe:	f000 b8a2 	b.w	8002c46 <__retarget_lock_release_recursive>
 8002b02:	bf00      	nop
 8002b04:	20000122 	.word	0x20000122

08002b08 <__sinit>:
 8002b08:	b510      	push	{r4, lr}
 8002b0a:	4604      	mov	r4, r0
 8002b0c:	f7ff fff0 	bl	8002af0 <__sinit_lock_acquire>
 8002b10:	69a3      	ldr	r3, [r4, #24]
 8002b12:	b11b      	cbz	r3, 8002b1c <__sinit+0x14>
 8002b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b18:	f7ff bff0 	b.w	8002afc <__sinit_lock_release>
 8002b1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002b20:	6523      	str	r3, [r4, #80]	; 0x50
 8002b22:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <__sinit+0x68>)
 8002b24:	4a13      	ldr	r2, [pc, #76]	; (8002b74 <__sinit+0x6c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	62a2      	str	r2, [r4, #40]	; 0x28
 8002b2a:	42a3      	cmp	r3, r4
 8002b2c:	bf04      	itt	eq
 8002b2e:	2301      	moveq	r3, #1
 8002b30:	61a3      	streq	r3, [r4, #24]
 8002b32:	4620      	mov	r0, r4
 8002b34:	f000 f820 	bl	8002b78 <__sfp>
 8002b38:	6060      	str	r0, [r4, #4]
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f000 f81c 	bl	8002b78 <__sfp>
 8002b40:	60a0      	str	r0, [r4, #8]
 8002b42:	4620      	mov	r0, r4
 8002b44:	f000 f818 	bl	8002b78 <__sfp>
 8002b48:	2200      	movs	r2, #0
 8002b4a:	60e0      	str	r0, [r4, #12]
 8002b4c:	2104      	movs	r1, #4
 8002b4e:	6860      	ldr	r0, [r4, #4]
 8002b50:	f7ff ff82 	bl	8002a58 <std>
 8002b54:	68a0      	ldr	r0, [r4, #8]
 8002b56:	2201      	movs	r2, #1
 8002b58:	2109      	movs	r1, #9
 8002b5a:	f7ff ff7d 	bl	8002a58 <std>
 8002b5e:	68e0      	ldr	r0, [r4, #12]
 8002b60:	2202      	movs	r2, #2
 8002b62:	2112      	movs	r1, #18
 8002b64:	f7ff ff78 	bl	8002a58 <std>
 8002b68:	2301      	movs	r3, #1
 8002b6a:	61a3      	str	r3, [r4, #24]
 8002b6c:	e7d2      	b.n	8002b14 <__sinit+0xc>
 8002b6e:	bf00      	nop
 8002b70:	08003984 	.word	0x08003984
 8002b74:	08002aa1 	.word	0x08002aa1

08002b78 <__sfp>:
 8002b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b7a:	4607      	mov	r7, r0
 8002b7c:	f7ff ffac 	bl	8002ad8 <__sfp_lock_acquire>
 8002b80:	4b1e      	ldr	r3, [pc, #120]	; (8002bfc <__sfp+0x84>)
 8002b82:	681e      	ldr	r6, [r3, #0]
 8002b84:	69b3      	ldr	r3, [r6, #24]
 8002b86:	b913      	cbnz	r3, 8002b8e <__sfp+0x16>
 8002b88:	4630      	mov	r0, r6
 8002b8a:	f7ff ffbd 	bl	8002b08 <__sinit>
 8002b8e:	3648      	adds	r6, #72	; 0x48
 8002b90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	d503      	bpl.n	8002ba0 <__sfp+0x28>
 8002b98:	6833      	ldr	r3, [r6, #0]
 8002b9a:	b30b      	cbz	r3, 8002be0 <__sfp+0x68>
 8002b9c:	6836      	ldr	r6, [r6, #0]
 8002b9e:	e7f7      	b.n	8002b90 <__sfp+0x18>
 8002ba0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002ba4:	b9d5      	cbnz	r5, 8002bdc <__sfp+0x64>
 8002ba6:	4b16      	ldr	r3, [pc, #88]	; (8002c00 <__sfp+0x88>)
 8002ba8:	60e3      	str	r3, [r4, #12]
 8002baa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002bae:	6665      	str	r5, [r4, #100]	; 0x64
 8002bb0:	f000 f847 	bl	8002c42 <__retarget_lock_init_recursive>
 8002bb4:	f7ff ff96 	bl	8002ae4 <__sfp_lock_release>
 8002bb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002bbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002bc0:	6025      	str	r5, [r4, #0]
 8002bc2:	61a5      	str	r5, [r4, #24]
 8002bc4:	2208      	movs	r2, #8
 8002bc6:	4629      	mov	r1, r5
 8002bc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002bcc:	f7ff ff24 	bl	8002a18 <memset>
 8002bd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002bd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002bd8:	4620      	mov	r0, r4
 8002bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bdc:	3468      	adds	r4, #104	; 0x68
 8002bde:	e7d9      	b.n	8002b94 <__sfp+0x1c>
 8002be0:	2104      	movs	r1, #4
 8002be2:	4638      	mov	r0, r7
 8002be4:	f7ff ff62 	bl	8002aac <__sfmoreglue>
 8002be8:	4604      	mov	r4, r0
 8002bea:	6030      	str	r0, [r6, #0]
 8002bec:	2800      	cmp	r0, #0
 8002bee:	d1d5      	bne.n	8002b9c <__sfp+0x24>
 8002bf0:	f7ff ff78 	bl	8002ae4 <__sfp_lock_release>
 8002bf4:	230c      	movs	r3, #12
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	e7ee      	b.n	8002bd8 <__sfp+0x60>
 8002bfa:	bf00      	nop
 8002bfc:	08003984 	.word	0x08003984
 8002c00:	ffff0001 	.word	0xffff0001

08002c04 <_fwalk_reent>:
 8002c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c08:	4606      	mov	r6, r0
 8002c0a:	4688      	mov	r8, r1
 8002c0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002c10:	2700      	movs	r7, #0
 8002c12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c16:	f1b9 0901 	subs.w	r9, r9, #1
 8002c1a:	d505      	bpl.n	8002c28 <_fwalk_reent+0x24>
 8002c1c:	6824      	ldr	r4, [r4, #0]
 8002c1e:	2c00      	cmp	r4, #0
 8002c20:	d1f7      	bne.n	8002c12 <_fwalk_reent+0xe>
 8002c22:	4638      	mov	r0, r7
 8002c24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c28:	89ab      	ldrh	r3, [r5, #12]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d907      	bls.n	8002c3e <_fwalk_reent+0x3a>
 8002c2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c32:	3301      	adds	r3, #1
 8002c34:	d003      	beq.n	8002c3e <_fwalk_reent+0x3a>
 8002c36:	4629      	mov	r1, r5
 8002c38:	4630      	mov	r0, r6
 8002c3a:	47c0      	blx	r8
 8002c3c:	4307      	orrs	r7, r0
 8002c3e:	3568      	adds	r5, #104	; 0x68
 8002c40:	e7e9      	b.n	8002c16 <_fwalk_reent+0x12>

08002c42 <__retarget_lock_init_recursive>:
 8002c42:	4770      	bx	lr

08002c44 <__retarget_lock_acquire_recursive>:
 8002c44:	4770      	bx	lr

08002c46 <__retarget_lock_release_recursive>:
 8002c46:	4770      	bx	lr

08002c48 <sbrk_aligned>:
 8002c48:	b570      	push	{r4, r5, r6, lr}
 8002c4a:	4e0e      	ldr	r6, [pc, #56]	; (8002c84 <sbrk_aligned+0x3c>)
 8002c4c:	460c      	mov	r4, r1
 8002c4e:	6831      	ldr	r1, [r6, #0]
 8002c50:	4605      	mov	r5, r0
 8002c52:	b911      	cbnz	r1, 8002c5a <sbrk_aligned+0x12>
 8002c54:	f000 fb7a 	bl	800334c <_sbrk_r>
 8002c58:	6030      	str	r0, [r6, #0]
 8002c5a:	4621      	mov	r1, r4
 8002c5c:	4628      	mov	r0, r5
 8002c5e:	f000 fb75 	bl	800334c <_sbrk_r>
 8002c62:	1c43      	adds	r3, r0, #1
 8002c64:	d00a      	beq.n	8002c7c <sbrk_aligned+0x34>
 8002c66:	1cc4      	adds	r4, r0, #3
 8002c68:	f024 0403 	bic.w	r4, r4, #3
 8002c6c:	42a0      	cmp	r0, r4
 8002c6e:	d007      	beq.n	8002c80 <sbrk_aligned+0x38>
 8002c70:	1a21      	subs	r1, r4, r0
 8002c72:	4628      	mov	r0, r5
 8002c74:	f000 fb6a 	bl	800334c <_sbrk_r>
 8002c78:	3001      	adds	r0, #1
 8002c7a:	d101      	bne.n	8002c80 <sbrk_aligned+0x38>
 8002c7c:	f04f 34ff 	mov.w	r4, #4294967295
 8002c80:	4620      	mov	r0, r4
 8002c82:	bd70      	pop	{r4, r5, r6, pc}
 8002c84:	20000128 	.word	0x20000128

08002c88 <_malloc_r>:
 8002c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c8c:	1ccd      	adds	r5, r1, #3
 8002c8e:	f025 0503 	bic.w	r5, r5, #3
 8002c92:	3508      	adds	r5, #8
 8002c94:	2d0c      	cmp	r5, #12
 8002c96:	bf38      	it	cc
 8002c98:	250c      	movcc	r5, #12
 8002c9a:	2d00      	cmp	r5, #0
 8002c9c:	4607      	mov	r7, r0
 8002c9e:	db01      	blt.n	8002ca4 <_malloc_r+0x1c>
 8002ca0:	42a9      	cmp	r1, r5
 8002ca2:	d905      	bls.n	8002cb0 <_malloc_r+0x28>
 8002ca4:	230c      	movs	r3, #12
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	2600      	movs	r6, #0
 8002caa:	4630      	mov	r0, r6
 8002cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cb0:	4e2e      	ldr	r6, [pc, #184]	; (8002d6c <_malloc_r+0xe4>)
 8002cb2:	f000 fdbb 	bl	800382c <__malloc_lock>
 8002cb6:	6833      	ldr	r3, [r6, #0]
 8002cb8:	461c      	mov	r4, r3
 8002cba:	bb34      	cbnz	r4, 8002d0a <_malloc_r+0x82>
 8002cbc:	4629      	mov	r1, r5
 8002cbe:	4638      	mov	r0, r7
 8002cc0:	f7ff ffc2 	bl	8002c48 <sbrk_aligned>
 8002cc4:	1c43      	adds	r3, r0, #1
 8002cc6:	4604      	mov	r4, r0
 8002cc8:	d14d      	bne.n	8002d66 <_malloc_r+0xde>
 8002cca:	6834      	ldr	r4, [r6, #0]
 8002ccc:	4626      	mov	r6, r4
 8002cce:	2e00      	cmp	r6, #0
 8002cd0:	d140      	bne.n	8002d54 <_malloc_r+0xcc>
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	4631      	mov	r1, r6
 8002cd6:	4638      	mov	r0, r7
 8002cd8:	eb04 0803 	add.w	r8, r4, r3
 8002cdc:	f000 fb36 	bl	800334c <_sbrk_r>
 8002ce0:	4580      	cmp	r8, r0
 8002ce2:	d13a      	bne.n	8002d5a <_malloc_r+0xd2>
 8002ce4:	6821      	ldr	r1, [r4, #0]
 8002ce6:	3503      	adds	r5, #3
 8002ce8:	1a6d      	subs	r5, r5, r1
 8002cea:	f025 0503 	bic.w	r5, r5, #3
 8002cee:	3508      	adds	r5, #8
 8002cf0:	2d0c      	cmp	r5, #12
 8002cf2:	bf38      	it	cc
 8002cf4:	250c      	movcc	r5, #12
 8002cf6:	4629      	mov	r1, r5
 8002cf8:	4638      	mov	r0, r7
 8002cfa:	f7ff ffa5 	bl	8002c48 <sbrk_aligned>
 8002cfe:	3001      	adds	r0, #1
 8002d00:	d02b      	beq.n	8002d5a <_malloc_r+0xd2>
 8002d02:	6823      	ldr	r3, [r4, #0]
 8002d04:	442b      	add	r3, r5
 8002d06:	6023      	str	r3, [r4, #0]
 8002d08:	e00e      	b.n	8002d28 <_malloc_r+0xa0>
 8002d0a:	6822      	ldr	r2, [r4, #0]
 8002d0c:	1b52      	subs	r2, r2, r5
 8002d0e:	d41e      	bmi.n	8002d4e <_malloc_r+0xc6>
 8002d10:	2a0b      	cmp	r2, #11
 8002d12:	d916      	bls.n	8002d42 <_malloc_r+0xba>
 8002d14:	1961      	adds	r1, r4, r5
 8002d16:	42a3      	cmp	r3, r4
 8002d18:	6025      	str	r5, [r4, #0]
 8002d1a:	bf18      	it	ne
 8002d1c:	6059      	strne	r1, [r3, #4]
 8002d1e:	6863      	ldr	r3, [r4, #4]
 8002d20:	bf08      	it	eq
 8002d22:	6031      	streq	r1, [r6, #0]
 8002d24:	5162      	str	r2, [r4, r5]
 8002d26:	604b      	str	r3, [r1, #4]
 8002d28:	4638      	mov	r0, r7
 8002d2a:	f104 060b 	add.w	r6, r4, #11
 8002d2e:	f000 fd83 	bl	8003838 <__malloc_unlock>
 8002d32:	f026 0607 	bic.w	r6, r6, #7
 8002d36:	1d23      	adds	r3, r4, #4
 8002d38:	1af2      	subs	r2, r6, r3
 8002d3a:	d0b6      	beq.n	8002caa <_malloc_r+0x22>
 8002d3c:	1b9b      	subs	r3, r3, r6
 8002d3e:	50a3      	str	r3, [r4, r2]
 8002d40:	e7b3      	b.n	8002caa <_malloc_r+0x22>
 8002d42:	6862      	ldr	r2, [r4, #4]
 8002d44:	42a3      	cmp	r3, r4
 8002d46:	bf0c      	ite	eq
 8002d48:	6032      	streq	r2, [r6, #0]
 8002d4a:	605a      	strne	r2, [r3, #4]
 8002d4c:	e7ec      	b.n	8002d28 <_malloc_r+0xa0>
 8002d4e:	4623      	mov	r3, r4
 8002d50:	6864      	ldr	r4, [r4, #4]
 8002d52:	e7b2      	b.n	8002cba <_malloc_r+0x32>
 8002d54:	4634      	mov	r4, r6
 8002d56:	6876      	ldr	r6, [r6, #4]
 8002d58:	e7b9      	b.n	8002cce <_malloc_r+0x46>
 8002d5a:	230c      	movs	r3, #12
 8002d5c:	603b      	str	r3, [r7, #0]
 8002d5e:	4638      	mov	r0, r7
 8002d60:	f000 fd6a 	bl	8003838 <__malloc_unlock>
 8002d64:	e7a1      	b.n	8002caa <_malloc_r+0x22>
 8002d66:	6025      	str	r5, [r4, #0]
 8002d68:	e7de      	b.n	8002d28 <_malloc_r+0xa0>
 8002d6a:	bf00      	nop
 8002d6c:	20000124 	.word	0x20000124

08002d70 <__sfputc_r>:
 8002d70:	6893      	ldr	r3, [r2, #8]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	b410      	push	{r4}
 8002d78:	6093      	str	r3, [r2, #8]
 8002d7a:	da08      	bge.n	8002d8e <__sfputc_r+0x1e>
 8002d7c:	6994      	ldr	r4, [r2, #24]
 8002d7e:	42a3      	cmp	r3, r4
 8002d80:	db01      	blt.n	8002d86 <__sfputc_r+0x16>
 8002d82:	290a      	cmp	r1, #10
 8002d84:	d103      	bne.n	8002d8e <__sfputc_r+0x1e>
 8002d86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d8a:	f000 bb33 	b.w	80033f4 <__swbuf_r>
 8002d8e:	6813      	ldr	r3, [r2, #0]
 8002d90:	1c58      	adds	r0, r3, #1
 8002d92:	6010      	str	r0, [r2, #0]
 8002d94:	7019      	strb	r1, [r3, #0]
 8002d96:	4608      	mov	r0, r1
 8002d98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <__sfputs_r>:
 8002d9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da0:	4606      	mov	r6, r0
 8002da2:	460f      	mov	r7, r1
 8002da4:	4614      	mov	r4, r2
 8002da6:	18d5      	adds	r5, r2, r3
 8002da8:	42ac      	cmp	r4, r5
 8002daa:	d101      	bne.n	8002db0 <__sfputs_r+0x12>
 8002dac:	2000      	movs	r0, #0
 8002dae:	e007      	b.n	8002dc0 <__sfputs_r+0x22>
 8002db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002db4:	463a      	mov	r2, r7
 8002db6:	4630      	mov	r0, r6
 8002db8:	f7ff ffda 	bl	8002d70 <__sfputc_r>
 8002dbc:	1c43      	adds	r3, r0, #1
 8002dbe:	d1f3      	bne.n	8002da8 <__sfputs_r+0xa>
 8002dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002dc4 <_vfiprintf_r>:
 8002dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dc8:	460d      	mov	r5, r1
 8002dca:	b09d      	sub	sp, #116	; 0x74
 8002dcc:	4614      	mov	r4, r2
 8002dce:	4698      	mov	r8, r3
 8002dd0:	4606      	mov	r6, r0
 8002dd2:	b118      	cbz	r0, 8002ddc <_vfiprintf_r+0x18>
 8002dd4:	6983      	ldr	r3, [r0, #24]
 8002dd6:	b90b      	cbnz	r3, 8002ddc <_vfiprintf_r+0x18>
 8002dd8:	f7ff fe96 	bl	8002b08 <__sinit>
 8002ddc:	4b89      	ldr	r3, [pc, #548]	; (8003004 <_vfiprintf_r+0x240>)
 8002dde:	429d      	cmp	r5, r3
 8002de0:	d11b      	bne.n	8002e1a <_vfiprintf_r+0x56>
 8002de2:	6875      	ldr	r5, [r6, #4]
 8002de4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002de6:	07d9      	lsls	r1, r3, #31
 8002de8:	d405      	bmi.n	8002df6 <_vfiprintf_r+0x32>
 8002dea:	89ab      	ldrh	r3, [r5, #12]
 8002dec:	059a      	lsls	r2, r3, #22
 8002dee:	d402      	bmi.n	8002df6 <_vfiprintf_r+0x32>
 8002df0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002df2:	f7ff ff27 	bl	8002c44 <__retarget_lock_acquire_recursive>
 8002df6:	89ab      	ldrh	r3, [r5, #12]
 8002df8:	071b      	lsls	r3, r3, #28
 8002dfa:	d501      	bpl.n	8002e00 <_vfiprintf_r+0x3c>
 8002dfc:	692b      	ldr	r3, [r5, #16]
 8002dfe:	b9eb      	cbnz	r3, 8002e3c <_vfiprintf_r+0x78>
 8002e00:	4629      	mov	r1, r5
 8002e02:	4630      	mov	r0, r6
 8002e04:	f000 fb5a 	bl	80034bc <__swsetup_r>
 8002e08:	b1c0      	cbz	r0, 8002e3c <_vfiprintf_r+0x78>
 8002e0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002e0c:	07dc      	lsls	r4, r3, #31
 8002e0e:	d50e      	bpl.n	8002e2e <_vfiprintf_r+0x6a>
 8002e10:	f04f 30ff 	mov.w	r0, #4294967295
 8002e14:	b01d      	add	sp, #116	; 0x74
 8002e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e1a:	4b7b      	ldr	r3, [pc, #492]	; (8003008 <_vfiprintf_r+0x244>)
 8002e1c:	429d      	cmp	r5, r3
 8002e1e:	d101      	bne.n	8002e24 <_vfiprintf_r+0x60>
 8002e20:	68b5      	ldr	r5, [r6, #8]
 8002e22:	e7df      	b.n	8002de4 <_vfiprintf_r+0x20>
 8002e24:	4b79      	ldr	r3, [pc, #484]	; (800300c <_vfiprintf_r+0x248>)
 8002e26:	429d      	cmp	r5, r3
 8002e28:	bf08      	it	eq
 8002e2a:	68f5      	ldreq	r5, [r6, #12]
 8002e2c:	e7da      	b.n	8002de4 <_vfiprintf_r+0x20>
 8002e2e:	89ab      	ldrh	r3, [r5, #12]
 8002e30:	0598      	lsls	r0, r3, #22
 8002e32:	d4ed      	bmi.n	8002e10 <_vfiprintf_r+0x4c>
 8002e34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002e36:	f7ff ff06 	bl	8002c46 <__retarget_lock_release_recursive>
 8002e3a:	e7e9      	b.n	8002e10 <_vfiprintf_r+0x4c>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8002e40:	2320      	movs	r3, #32
 8002e42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e46:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e4a:	2330      	movs	r3, #48	; 0x30
 8002e4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003010 <_vfiprintf_r+0x24c>
 8002e50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e54:	f04f 0901 	mov.w	r9, #1
 8002e58:	4623      	mov	r3, r4
 8002e5a:	469a      	mov	sl, r3
 8002e5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e60:	b10a      	cbz	r2, 8002e66 <_vfiprintf_r+0xa2>
 8002e62:	2a25      	cmp	r2, #37	; 0x25
 8002e64:	d1f9      	bne.n	8002e5a <_vfiprintf_r+0x96>
 8002e66:	ebba 0b04 	subs.w	fp, sl, r4
 8002e6a:	d00b      	beq.n	8002e84 <_vfiprintf_r+0xc0>
 8002e6c:	465b      	mov	r3, fp
 8002e6e:	4622      	mov	r2, r4
 8002e70:	4629      	mov	r1, r5
 8002e72:	4630      	mov	r0, r6
 8002e74:	f7ff ff93 	bl	8002d9e <__sfputs_r>
 8002e78:	3001      	adds	r0, #1
 8002e7a:	f000 80aa 	beq.w	8002fd2 <_vfiprintf_r+0x20e>
 8002e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e80:	445a      	add	r2, fp
 8002e82:	9209      	str	r2, [sp, #36]	; 0x24
 8002e84:	f89a 3000 	ldrb.w	r3, [sl]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 80a2 	beq.w	8002fd2 <_vfiprintf_r+0x20e>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f04f 32ff 	mov.w	r2, #4294967295
 8002e94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e98:	f10a 0a01 	add.w	sl, sl, #1
 8002e9c:	9304      	str	r3, [sp, #16]
 8002e9e:	9307      	str	r3, [sp, #28]
 8002ea0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ea4:	931a      	str	r3, [sp, #104]	; 0x68
 8002ea6:	4654      	mov	r4, sl
 8002ea8:	2205      	movs	r2, #5
 8002eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002eae:	4858      	ldr	r0, [pc, #352]	; (8003010 <_vfiprintf_r+0x24c>)
 8002eb0:	f7fd f996 	bl	80001e0 <memchr>
 8002eb4:	9a04      	ldr	r2, [sp, #16]
 8002eb6:	b9d8      	cbnz	r0, 8002ef0 <_vfiprintf_r+0x12c>
 8002eb8:	06d1      	lsls	r1, r2, #27
 8002eba:	bf44      	itt	mi
 8002ebc:	2320      	movmi	r3, #32
 8002ebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ec2:	0713      	lsls	r3, r2, #28
 8002ec4:	bf44      	itt	mi
 8002ec6:	232b      	movmi	r3, #43	; 0x2b
 8002ec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8002ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8002ed2:	d015      	beq.n	8002f00 <_vfiprintf_r+0x13c>
 8002ed4:	9a07      	ldr	r2, [sp, #28]
 8002ed6:	4654      	mov	r4, sl
 8002ed8:	2000      	movs	r0, #0
 8002eda:	f04f 0c0a 	mov.w	ip, #10
 8002ede:	4621      	mov	r1, r4
 8002ee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ee4:	3b30      	subs	r3, #48	; 0x30
 8002ee6:	2b09      	cmp	r3, #9
 8002ee8:	d94e      	bls.n	8002f88 <_vfiprintf_r+0x1c4>
 8002eea:	b1b0      	cbz	r0, 8002f1a <_vfiprintf_r+0x156>
 8002eec:	9207      	str	r2, [sp, #28]
 8002eee:	e014      	b.n	8002f1a <_vfiprintf_r+0x156>
 8002ef0:	eba0 0308 	sub.w	r3, r0, r8
 8002ef4:	fa09 f303 	lsl.w	r3, r9, r3
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	9304      	str	r3, [sp, #16]
 8002efc:	46a2      	mov	sl, r4
 8002efe:	e7d2      	b.n	8002ea6 <_vfiprintf_r+0xe2>
 8002f00:	9b03      	ldr	r3, [sp, #12]
 8002f02:	1d19      	adds	r1, r3, #4
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	9103      	str	r1, [sp, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bfbb      	ittet	lt
 8002f0c:	425b      	neglt	r3, r3
 8002f0e:	f042 0202 	orrlt.w	r2, r2, #2
 8002f12:	9307      	strge	r3, [sp, #28]
 8002f14:	9307      	strlt	r3, [sp, #28]
 8002f16:	bfb8      	it	lt
 8002f18:	9204      	strlt	r2, [sp, #16]
 8002f1a:	7823      	ldrb	r3, [r4, #0]
 8002f1c:	2b2e      	cmp	r3, #46	; 0x2e
 8002f1e:	d10c      	bne.n	8002f3a <_vfiprintf_r+0x176>
 8002f20:	7863      	ldrb	r3, [r4, #1]
 8002f22:	2b2a      	cmp	r3, #42	; 0x2a
 8002f24:	d135      	bne.n	8002f92 <_vfiprintf_r+0x1ce>
 8002f26:	9b03      	ldr	r3, [sp, #12]
 8002f28:	1d1a      	adds	r2, r3, #4
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	9203      	str	r2, [sp, #12]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	bfb8      	it	lt
 8002f32:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f36:	3402      	adds	r4, #2
 8002f38:	9305      	str	r3, [sp, #20]
 8002f3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003020 <_vfiprintf_r+0x25c>
 8002f3e:	7821      	ldrb	r1, [r4, #0]
 8002f40:	2203      	movs	r2, #3
 8002f42:	4650      	mov	r0, sl
 8002f44:	f7fd f94c 	bl	80001e0 <memchr>
 8002f48:	b140      	cbz	r0, 8002f5c <_vfiprintf_r+0x198>
 8002f4a:	2340      	movs	r3, #64	; 0x40
 8002f4c:	eba0 000a 	sub.w	r0, r0, sl
 8002f50:	fa03 f000 	lsl.w	r0, r3, r0
 8002f54:	9b04      	ldr	r3, [sp, #16]
 8002f56:	4303      	orrs	r3, r0
 8002f58:	3401      	adds	r4, #1
 8002f5a:	9304      	str	r3, [sp, #16]
 8002f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f60:	482c      	ldr	r0, [pc, #176]	; (8003014 <_vfiprintf_r+0x250>)
 8002f62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f66:	2206      	movs	r2, #6
 8002f68:	f7fd f93a 	bl	80001e0 <memchr>
 8002f6c:	2800      	cmp	r0, #0
 8002f6e:	d03f      	beq.n	8002ff0 <_vfiprintf_r+0x22c>
 8002f70:	4b29      	ldr	r3, [pc, #164]	; (8003018 <_vfiprintf_r+0x254>)
 8002f72:	bb1b      	cbnz	r3, 8002fbc <_vfiprintf_r+0x1f8>
 8002f74:	9b03      	ldr	r3, [sp, #12]
 8002f76:	3307      	adds	r3, #7
 8002f78:	f023 0307 	bic.w	r3, r3, #7
 8002f7c:	3308      	adds	r3, #8
 8002f7e:	9303      	str	r3, [sp, #12]
 8002f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f82:	443b      	add	r3, r7
 8002f84:	9309      	str	r3, [sp, #36]	; 0x24
 8002f86:	e767      	b.n	8002e58 <_vfiprintf_r+0x94>
 8002f88:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f8c:	460c      	mov	r4, r1
 8002f8e:	2001      	movs	r0, #1
 8002f90:	e7a5      	b.n	8002ede <_vfiprintf_r+0x11a>
 8002f92:	2300      	movs	r3, #0
 8002f94:	3401      	adds	r4, #1
 8002f96:	9305      	str	r3, [sp, #20]
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f04f 0c0a 	mov.w	ip, #10
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002fa4:	3a30      	subs	r2, #48	; 0x30
 8002fa6:	2a09      	cmp	r2, #9
 8002fa8:	d903      	bls.n	8002fb2 <_vfiprintf_r+0x1ee>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0c5      	beq.n	8002f3a <_vfiprintf_r+0x176>
 8002fae:	9105      	str	r1, [sp, #20]
 8002fb0:	e7c3      	b.n	8002f3a <_vfiprintf_r+0x176>
 8002fb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8002fb6:	4604      	mov	r4, r0
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e7f0      	b.n	8002f9e <_vfiprintf_r+0x1da>
 8002fbc:	ab03      	add	r3, sp, #12
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	462a      	mov	r2, r5
 8002fc2:	4b16      	ldr	r3, [pc, #88]	; (800301c <_vfiprintf_r+0x258>)
 8002fc4:	a904      	add	r1, sp, #16
 8002fc6:	4630      	mov	r0, r6
 8002fc8:	f3af 8000 	nop.w
 8002fcc:	4607      	mov	r7, r0
 8002fce:	1c78      	adds	r0, r7, #1
 8002fd0:	d1d6      	bne.n	8002f80 <_vfiprintf_r+0x1bc>
 8002fd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002fd4:	07d9      	lsls	r1, r3, #31
 8002fd6:	d405      	bmi.n	8002fe4 <_vfiprintf_r+0x220>
 8002fd8:	89ab      	ldrh	r3, [r5, #12]
 8002fda:	059a      	lsls	r2, r3, #22
 8002fdc:	d402      	bmi.n	8002fe4 <_vfiprintf_r+0x220>
 8002fde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002fe0:	f7ff fe31 	bl	8002c46 <__retarget_lock_release_recursive>
 8002fe4:	89ab      	ldrh	r3, [r5, #12]
 8002fe6:	065b      	lsls	r3, r3, #25
 8002fe8:	f53f af12 	bmi.w	8002e10 <_vfiprintf_r+0x4c>
 8002fec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002fee:	e711      	b.n	8002e14 <_vfiprintf_r+0x50>
 8002ff0:	ab03      	add	r3, sp, #12
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	462a      	mov	r2, r5
 8002ff6:	4b09      	ldr	r3, [pc, #36]	; (800301c <_vfiprintf_r+0x258>)
 8002ff8:	a904      	add	r1, sp, #16
 8002ffa:	4630      	mov	r0, r6
 8002ffc:	f000 f880 	bl	8003100 <_printf_i>
 8003000:	e7e4      	b.n	8002fcc <_vfiprintf_r+0x208>
 8003002:	bf00      	nop
 8003004:	080039a8 	.word	0x080039a8
 8003008:	080039c8 	.word	0x080039c8
 800300c:	08003988 	.word	0x08003988
 8003010:	080039e8 	.word	0x080039e8
 8003014:	080039f2 	.word	0x080039f2
 8003018:	00000000 	.word	0x00000000
 800301c:	08002d9f 	.word	0x08002d9f
 8003020:	080039ee 	.word	0x080039ee

08003024 <_printf_common>:
 8003024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003028:	4616      	mov	r6, r2
 800302a:	4699      	mov	r9, r3
 800302c:	688a      	ldr	r2, [r1, #8]
 800302e:	690b      	ldr	r3, [r1, #16]
 8003030:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003034:	4293      	cmp	r3, r2
 8003036:	bfb8      	it	lt
 8003038:	4613      	movlt	r3, r2
 800303a:	6033      	str	r3, [r6, #0]
 800303c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003040:	4607      	mov	r7, r0
 8003042:	460c      	mov	r4, r1
 8003044:	b10a      	cbz	r2, 800304a <_printf_common+0x26>
 8003046:	3301      	adds	r3, #1
 8003048:	6033      	str	r3, [r6, #0]
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	0699      	lsls	r1, r3, #26
 800304e:	bf42      	ittt	mi
 8003050:	6833      	ldrmi	r3, [r6, #0]
 8003052:	3302      	addmi	r3, #2
 8003054:	6033      	strmi	r3, [r6, #0]
 8003056:	6825      	ldr	r5, [r4, #0]
 8003058:	f015 0506 	ands.w	r5, r5, #6
 800305c:	d106      	bne.n	800306c <_printf_common+0x48>
 800305e:	f104 0a19 	add.w	sl, r4, #25
 8003062:	68e3      	ldr	r3, [r4, #12]
 8003064:	6832      	ldr	r2, [r6, #0]
 8003066:	1a9b      	subs	r3, r3, r2
 8003068:	42ab      	cmp	r3, r5
 800306a:	dc26      	bgt.n	80030ba <_printf_common+0x96>
 800306c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003070:	1e13      	subs	r3, r2, #0
 8003072:	6822      	ldr	r2, [r4, #0]
 8003074:	bf18      	it	ne
 8003076:	2301      	movne	r3, #1
 8003078:	0692      	lsls	r2, r2, #26
 800307a:	d42b      	bmi.n	80030d4 <_printf_common+0xb0>
 800307c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003080:	4649      	mov	r1, r9
 8003082:	4638      	mov	r0, r7
 8003084:	47c0      	blx	r8
 8003086:	3001      	adds	r0, #1
 8003088:	d01e      	beq.n	80030c8 <_printf_common+0xa4>
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	68e5      	ldr	r5, [r4, #12]
 800308e:	6832      	ldr	r2, [r6, #0]
 8003090:	f003 0306 	and.w	r3, r3, #6
 8003094:	2b04      	cmp	r3, #4
 8003096:	bf08      	it	eq
 8003098:	1aad      	subeq	r5, r5, r2
 800309a:	68a3      	ldr	r3, [r4, #8]
 800309c:	6922      	ldr	r2, [r4, #16]
 800309e:	bf0c      	ite	eq
 80030a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030a4:	2500      	movne	r5, #0
 80030a6:	4293      	cmp	r3, r2
 80030a8:	bfc4      	itt	gt
 80030aa:	1a9b      	subgt	r3, r3, r2
 80030ac:	18ed      	addgt	r5, r5, r3
 80030ae:	2600      	movs	r6, #0
 80030b0:	341a      	adds	r4, #26
 80030b2:	42b5      	cmp	r5, r6
 80030b4:	d11a      	bne.n	80030ec <_printf_common+0xc8>
 80030b6:	2000      	movs	r0, #0
 80030b8:	e008      	b.n	80030cc <_printf_common+0xa8>
 80030ba:	2301      	movs	r3, #1
 80030bc:	4652      	mov	r2, sl
 80030be:	4649      	mov	r1, r9
 80030c0:	4638      	mov	r0, r7
 80030c2:	47c0      	blx	r8
 80030c4:	3001      	adds	r0, #1
 80030c6:	d103      	bne.n	80030d0 <_printf_common+0xac>
 80030c8:	f04f 30ff 	mov.w	r0, #4294967295
 80030cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030d0:	3501      	adds	r5, #1
 80030d2:	e7c6      	b.n	8003062 <_printf_common+0x3e>
 80030d4:	18e1      	adds	r1, r4, r3
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	2030      	movs	r0, #48	; 0x30
 80030da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030de:	4422      	add	r2, r4
 80030e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030e8:	3302      	adds	r3, #2
 80030ea:	e7c7      	b.n	800307c <_printf_common+0x58>
 80030ec:	2301      	movs	r3, #1
 80030ee:	4622      	mov	r2, r4
 80030f0:	4649      	mov	r1, r9
 80030f2:	4638      	mov	r0, r7
 80030f4:	47c0      	blx	r8
 80030f6:	3001      	adds	r0, #1
 80030f8:	d0e6      	beq.n	80030c8 <_printf_common+0xa4>
 80030fa:	3601      	adds	r6, #1
 80030fc:	e7d9      	b.n	80030b2 <_printf_common+0x8e>
	...

08003100 <_printf_i>:
 8003100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003104:	7e0f      	ldrb	r7, [r1, #24]
 8003106:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003108:	2f78      	cmp	r7, #120	; 0x78
 800310a:	4691      	mov	r9, r2
 800310c:	4680      	mov	r8, r0
 800310e:	460c      	mov	r4, r1
 8003110:	469a      	mov	sl, r3
 8003112:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003116:	d807      	bhi.n	8003128 <_printf_i+0x28>
 8003118:	2f62      	cmp	r7, #98	; 0x62
 800311a:	d80a      	bhi.n	8003132 <_printf_i+0x32>
 800311c:	2f00      	cmp	r7, #0
 800311e:	f000 80d8 	beq.w	80032d2 <_printf_i+0x1d2>
 8003122:	2f58      	cmp	r7, #88	; 0x58
 8003124:	f000 80a3 	beq.w	800326e <_printf_i+0x16e>
 8003128:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800312c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003130:	e03a      	b.n	80031a8 <_printf_i+0xa8>
 8003132:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003136:	2b15      	cmp	r3, #21
 8003138:	d8f6      	bhi.n	8003128 <_printf_i+0x28>
 800313a:	a101      	add	r1, pc, #4	; (adr r1, 8003140 <_printf_i+0x40>)
 800313c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003140:	08003199 	.word	0x08003199
 8003144:	080031ad 	.word	0x080031ad
 8003148:	08003129 	.word	0x08003129
 800314c:	08003129 	.word	0x08003129
 8003150:	08003129 	.word	0x08003129
 8003154:	08003129 	.word	0x08003129
 8003158:	080031ad 	.word	0x080031ad
 800315c:	08003129 	.word	0x08003129
 8003160:	08003129 	.word	0x08003129
 8003164:	08003129 	.word	0x08003129
 8003168:	08003129 	.word	0x08003129
 800316c:	080032b9 	.word	0x080032b9
 8003170:	080031dd 	.word	0x080031dd
 8003174:	0800329b 	.word	0x0800329b
 8003178:	08003129 	.word	0x08003129
 800317c:	08003129 	.word	0x08003129
 8003180:	080032db 	.word	0x080032db
 8003184:	08003129 	.word	0x08003129
 8003188:	080031dd 	.word	0x080031dd
 800318c:	08003129 	.word	0x08003129
 8003190:	08003129 	.word	0x08003129
 8003194:	080032a3 	.word	0x080032a3
 8003198:	682b      	ldr	r3, [r5, #0]
 800319a:	1d1a      	adds	r2, r3, #4
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	602a      	str	r2, [r5, #0]
 80031a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0a3      	b.n	80032f4 <_printf_i+0x1f4>
 80031ac:	6820      	ldr	r0, [r4, #0]
 80031ae:	6829      	ldr	r1, [r5, #0]
 80031b0:	0606      	lsls	r6, r0, #24
 80031b2:	f101 0304 	add.w	r3, r1, #4
 80031b6:	d50a      	bpl.n	80031ce <_printf_i+0xce>
 80031b8:	680e      	ldr	r6, [r1, #0]
 80031ba:	602b      	str	r3, [r5, #0]
 80031bc:	2e00      	cmp	r6, #0
 80031be:	da03      	bge.n	80031c8 <_printf_i+0xc8>
 80031c0:	232d      	movs	r3, #45	; 0x2d
 80031c2:	4276      	negs	r6, r6
 80031c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031c8:	485e      	ldr	r0, [pc, #376]	; (8003344 <_printf_i+0x244>)
 80031ca:	230a      	movs	r3, #10
 80031cc:	e019      	b.n	8003202 <_printf_i+0x102>
 80031ce:	680e      	ldr	r6, [r1, #0]
 80031d0:	602b      	str	r3, [r5, #0]
 80031d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80031d6:	bf18      	it	ne
 80031d8:	b236      	sxthne	r6, r6
 80031da:	e7ef      	b.n	80031bc <_printf_i+0xbc>
 80031dc:	682b      	ldr	r3, [r5, #0]
 80031de:	6820      	ldr	r0, [r4, #0]
 80031e0:	1d19      	adds	r1, r3, #4
 80031e2:	6029      	str	r1, [r5, #0]
 80031e4:	0601      	lsls	r1, r0, #24
 80031e6:	d501      	bpl.n	80031ec <_printf_i+0xec>
 80031e8:	681e      	ldr	r6, [r3, #0]
 80031ea:	e002      	b.n	80031f2 <_printf_i+0xf2>
 80031ec:	0646      	lsls	r6, r0, #25
 80031ee:	d5fb      	bpl.n	80031e8 <_printf_i+0xe8>
 80031f0:	881e      	ldrh	r6, [r3, #0]
 80031f2:	4854      	ldr	r0, [pc, #336]	; (8003344 <_printf_i+0x244>)
 80031f4:	2f6f      	cmp	r7, #111	; 0x6f
 80031f6:	bf0c      	ite	eq
 80031f8:	2308      	moveq	r3, #8
 80031fa:	230a      	movne	r3, #10
 80031fc:	2100      	movs	r1, #0
 80031fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003202:	6865      	ldr	r5, [r4, #4]
 8003204:	60a5      	str	r5, [r4, #8]
 8003206:	2d00      	cmp	r5, #0
 8003208:	bfa2      	ittt	ge
 800320a:	6821      	ldrge	r1, [r4, #0]
 800320c:	f021 0104 	bicge.w	r1, r1, #4
 8003210:	6021      	strge	r1, [r4, #0]
 8003212:	b90e      	cbnz	r6, 8003218 <_printf_i+0x118>
 8003214:	2d00      	cmp	r5, #0
 8003216:	d04d      	beq.n	80032b4 <_printf_i+0x1b4>
 8003218:	4615      	mov	r5, r2
 800321a:	fbb6 f1f3 	udiv	r1, r6, r3
 800321e:	fb03 6711 	mls	r7, r3, r1, r6
 8003222:	5dc7      	ldrb	r7, [r0, r7]
 8003224:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003228:	4637      	mov	r7, r6
 800322a:	42bb      	cmp	r3, r7
 800322c:	460e      	mov	r6, r1
 800322e:	d9f4      	bls.n	800321a <_printf_i+0x11a>
 8003230:	2b08      	cmp	r3, #8
 8003232:	d10b      	bne.n	800324c <_printf_i+0x14c>
 8003234:	6823      	ldr	r3, [r4, #0]
 8003236:	07de      	lsls	r6, r3, #31
 8003238:	d508      	bpl.n	800324c <_printf_i+0x14c>
 800323a:	6923      	ldr	r3, [r4, #16]
 800323c:	6861      	ldr	r1, [r4, #4]
 800323e:	4299      	cmp	r1, r3
 8003240:	bfde      	ittt	le
 8003242:	2330      	movle	r3, #48	; 0x30
 8003244:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003248:	f105 35ff 	addle.w	r5, r5, #4294967295
 800324c:	1b52      	subs	r2, r2, r5
 800324e:	6122      	str	r2, [r4, #16]
 8003250:	f8cd a000 	str.w	sl, [sp]
 8003254:	464b      	mov	r3, r9
 8003256:	aa03      	add	r2, sp, #12
 8003258:	4621      	mov	r1, r4
 800325a:	4640      	mov	r0, r8
 800325c:	f7ff fee2 	bl	8003024 <_printf_common>
 8003260:	3001      	adds	r0, #1
 8003262:	d14c      	bne.n	80032fe <_printf_i+0x1fe>
 8003264:	f04f 30ff 	mov.w	r0, #4294967295
 8003268:	b004      	add	sp, #16
 800326a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800326e:	4835      	ldr	r0, [pc, #212]	; (8003344 <_printf_i+0x244>)
 8003270:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003274:	6829      	ldr	r1, [r5, #0]
 8003276:	6823      	ldr	r3, [r4, #0]
 8003278:	f851 6b04 	ldr.w	r6, [r1], #4
 800327c:	6029      	str	r1, [r5, #0]
 800327e:	061d      	lsls	r5, r3, #24
 8003280:	d514      	bpl.n	80032ac <_printf_i+0x1ac>
 8003282:	07df      	lsls	r7, r3, #31
 8003284:	bf44      	itt	mi
 8003286:	f043 0320 	orrmi.w	r3, r3, #32
 800328a:	6023      	strmi	r3, [r4, #0]
 800328c:	b91e      	cbnz	r6, 8003296 <_printf_i+0x196>
 800328e:	6823      	ldr	r3, [r4, #0]
 8003290:	f023 0320 	bic.w	r3, r3, #32
 8003294:	6023      	str	r3, [r4, #0]
 8003296:	2310      	movs	r3, #16
 8003298:	e7b0      	b.n	80031fc <_printf_i+0xfc>
 800329a:	6823      	ldr	r3, [r4, #0]
 800329c:	f043 0320 	orr.w	r3, r3, #32
 80032a0:	6023      	str	r3, [r4, #0]
 80032a2:	2378      	movs	r3, #120	; 0x78
 80032a4:	4828      	ldr	r0, [pc, #160]	; (8003348 <_printf_i+0x248>)
 80032a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80032aa:	e7e3      	b.n	8003274 <_printf_i+0x174>
 80032ac:	0659      	lsls	r1, r3, #25
 80032ae:	bf48      	it	mi
 80032b0:	b2b6      	uxthmi	r6, r6
 80032b2:	e7e6      	b.n	8003282 <_printf_i+0x182>
 80032b4:	4615      	mov	r5, r2
 80032b6:	e7bb      	b.n	8003230 <_printf_i+0x130>
 80032b8:	682b      	ldr	r3, [r5, #0]
 80032ba:	6826      	ldr	r6, [r4, #0]
 80032bc:	6961      	ldr	r1, [r4, #20]
 80032be:	1d18      	adds	r0, r3, #4
 80032c0:	6028      	str	r0, [r5, #0]
 80032c2:	0635      	lsls	r5, r6, #24
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	d501      	bpl.n	80032cc <_printf_i+0x1cc>
 80032c8:	6019      	str	r1, [r3, #0]
 80032ca:	e002      	b.n	80032d2 <_printf_i+0x1d2>
 80032cc:	0670      	lsls	r0, r6, #25
 80032ce:	d5fb      	bpl.n	80032c8 <_printf_i+0x1c8>
 80032d0:	8019      	strh	r1, [r3, #0]
 80032d2:	2300      	movs	r3, #0
 80032d4:	6123      	str	r3, [r4, #16]
 80032d6:	4615      	mov	r5, r2
 80032d8:	e7ba      	b.n	8003250 <_printf_i+0x150>
 80032da:	682b      	ldr	r3, [r5, #0]
 80032dc:	1d1a      	adds	r2, r3, #4
 80032de:	602a      	str	r2, [r5, #0]
 80032e0:	681d      	ldr	r5, [r3, #0]
 80032e2:	6862      	ldr	r2, [r4, #4]
 80032e4:	2100      	movs	r1, #0
 80032e6:	4628      	mov	r0, r5
 80032e8:	f7fc ff7a 	bl	80001e0 <memchr>
 80032ec:	b108      	cbz	r0, 80032f2 <_printf_i+0x1f2>
 80032ee:	1b40      	subs	r0, r0, r5
 80032f0:	6060      	str	r0, [r4, #4]
 80032f2:	6863      	ldr	r3, [r4, #4]
 80032f4:	6123      	str	r3, [r4, #16]
 80032f6:	2300      	movs	r3, #0
 80032f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032fc:	e7a8      	b.n	8003250 <_printf_i+0x150>
 80032fe:	6923      	ldr	r3, [r4, #16]
 8003300:	462a      	mov	r2, r5
 8003302:	4649      	mov	r1, r9
 8003304:	4640      	mov	r0, r8
 8003306:	47d0      	blx	sl
 8003308:	3001      	adds	r0, #1
 800330a:	d0ab      	beq.n	8003264 <_printf_i+0x164>
 800330c:	6823      	ldr	r3, [r4, #0]
 800330e:	079b      	lsls	r3, r3, #30
 8003310:	d413      	bmi.n	800333a <_printf_i+0x23a>
 8003312:	68e0      	ldr	r0, [r4, #12]
 8003314:	9b03      	ldr	r3, [sp, #12]
 8003316:	4298      	cmp	r0, r3
 8003318:	bfb8      	it	lt
 800331a:	4618      	movlt	r0, r3
 800331c:	e7a4      	b.n	8003268 <_printf_i+0x168>
 800331e:	2301      	movs	r3, #1
 8003320:	4632      	mov	r2, r6
 8003322:	4649      	mov	r1, r9
 8003324:	4640      	mov	r0, r8
 8003326:	47d0      	blx	sl
 8003328:	3001      	adds	r0, #1
 800332a:	d09b      	beq.n	8003264 <_printf_i+0x164>
 800332c:	3501      	adds	r5, #1
 800332e:	68e3      	ldr	r3, [r4, #12]
 8003330:	9903      	ldr	r1, [sp, #12]
 8003332:	1a5b      	subs	r3, r3, r1
 8003334:	42ab      	cmp	r3, r5
 8003336:	dcf2      	bgt.n	800331e <_printf_i+0x21e>
 8003338:	e7eb      	b.n	8003312 <_printf_i+0x212>
 800333a:	2500      	movs	r5, #0
 800333c:	f104 0619 	add.w	r6, r4, #25
 8003340:	e7f5      	b.n	800332e <_printf_i+0x22e>
 8003342:	bf00      	nop
 8003344:	080039f9 	.word	0x080039f9
 8003348:	08003a0a 	.word	0x08003a0a

0800334c <_sbrk_r>:
 800334c:	b538      	push	{r3, r4, r5, lr}
 800334e:	4d06      	ldr	r5, [pc, #24]	; (8003368 <_sbrk_r+0x1c>)
 8003350:	2300      	movs	r3, #0
 8003352:	4604      	mov	r4, r0
 8003354:	4608      	mov	r0, r1
 8003356:	602b      	str	r3, [r5, #0]
 8003358:	f7fd fc68 	bl	8000c2c <_sbrk>
 800335c:	1c43      	adds	r3, r0, #1
 800335e:	d102      	bne.n	8003366 <_sbrk_r+0x1a>
 8003360:	682b      	ldr	r3, [r5, #0]
 8003362:	b103      	cbz	r3, 8003366 <_sbrk_r+0x1a>
 8003364:	6023      	str	r3, [r4, #0]
 8003366:	bd38      	pop	{r3, r4, r5, pc}
 8003368:	2000012c 	.word	0x2000012c

0800336c <__sread>:
 800336c:	b510      	push	{r4, lr}
 800336e:	460c      	mov	r4, r1
 8003370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003374:	f000 fab2 	bl	80038dc <_read_r>
 8003378:	2800      	cmp	r0, #0
 800337a:	bfab      	itete	ge
 800337c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800337e:	89a3      	ldrhlt	r3, [r4, #12]
 8003380:	181b      	addge	r3, r3, r0
 8003382:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003386:	bfac      	ite	ge
 8003388:	6563      	strge	r3, [r4, #84]	; 0x54
 800338a:	81a3      	strhlt	r3, [r4, #12]
 800338c:	bd10      	pop	{r4, pc}

0800338e <__swrite>:
 800338e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003392:	461f      	mov	r7, r3
 8003394:	898b      	ldrh	r3, [r1, #12]
 8003396:	05db      	lsls	r3, r3, #23
 8003398:	4605      	mov	r5, r0
 800339a:	460c      	mov	r4, r1
 800339c:	4616      	mov	r6, r2
 800339e:	d505      	bpl.n	80033ac <__swrite+0x1e>
 80033a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033a4:	2302      	movs	r3, #2
 80033a6:	2200      	movs	r2, #0
 80033a8:	f000 f9c8 	bl	800373c <_lseek_r>
 80033ac:	89a3      	ldrh	r3, [r4, #12]
 80033ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033b6:	81a3      	strh	r3, [r4, #12]
 80033b8:	4632      	mov	r2, r6
 80033ba:	463b      	mov	r3, r7
 80033bc:	4628      	mov	r0, r5
 80033be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033c2:	f000 b869 	b.w	8003498 <_write_r>

080033c6 <__sseek>:
 80033c6:	b510      	push	{r4, lr}
 80033c8:	460c      	mov	r4, r1
 80033ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033ce:	f000 f9b5 	bl	800373c <_lseek_r>
 80033d2:	1c43      	adds	r3, r0, #1
 80033d4:	89a3      	ldrh	r3, [r4, #12]
 80033d6:	bf15      	itete	ne
 80033d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80033da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80033de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80033e2:	81a3      	strheq	r3, [r4, #12]
 80033e4:	bf18      	it	ne
 80033e6:	81a3      	strhne	r3, [r4, #12]
 80033e8:	bd10      	pop	{r4, pc}

080033ea <__sclose>:
 80033ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033ee:	f000 b8d3 	b.w	8003598 <_close_r>
	...

080033f4 <__swbuf_r>:
 80033f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f6:	460e      	mov	r6, r1
 80033f8:	4614      	mov	r4, r2
 80033fa:	4605      	mov	r5, r0
 80033fc:	b118      	cbz	r0, 8003406 <__swbuf_r+0x12>
 80033fe:	6983      	ldr	r3, [r0, #24]
 8003400:	b90b      	cbnz	r3, 8003406 <__swbuf_r+0x12>
 8003402:	f7ff fb81 	bl	8002b08 <__sinit>
 8003406:	4b21      	ldr	r3, [pc, #132]	; (800348c <__swbuf_r+0x98>)
 8003408:	429c      	cmp	r4, r3
 800340a:	d12b      	bne.n	8003464 <__swbuf_r+0x70>
 800340c:	686c      	ldr	r4, [r5, #4]
 800340e:	69a3      	ldr	r3, [r4, #24]
 8003410:	60a3      	str	r3, [r4, #8]
 8003412:	89a3      	ldrh	r3, [r4, #12]
 8003414:	071a      	lsls	r2, r3, #28
 8003416:	d52f      	bpl.n	8003478 <__swbuf_r+0x84>
 8003418:	6923      	ldr	r3, [r4, #16]
 800341a:	b36b      	cbz	r3, 8003478 <__swbuf_r+0x84>
 800341c:	6923      	ldr	r3, [r4, #16]
 800341e:	6820      	ldr	r0, [r4, #0]
 8003420:	1ac0      	subs	r0, r0, r3
 8003422:	6963      	ldr	r3, [r4, #20]
 8003424:	b2f6      	uxtb	r6, r6
 8003426:	4283      	cmp	r3, r0
 8003428:	4637      	mov	r7, r6
 800342a:	dc04      	bgt.n	8003436 <__swbuf_r+0x42>
 800342c:	4621      	mov	r1, r4
 800342e:	4628      	mov	r0, r5
 8003430:	f000 f948 	bl	80036c4 <_fflush_r>
 8003434:	bb30      	cbnz	r0, 8003484 <__swbuf_r+0x90>
 8003436:	68a3      	ldr	r3, [r4, #8]
 8003438:	3b01      	subs	r3, #1
 800343a:	60a3      	str	r3, [r4, #8]
 800343c:	6823      	ldr	r3, [r4, #0]
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	6022      	str	r2, [r4, #0]
 8003442:	701e      	strb	r6, [r3, #0]
 8003444:	6963      	ldr	r3, [r4, #20]
 8003446:	3001      	adds	r0, #1
 8003448:	4283      	cmp	r3, r0
 800344a:	d004      	beq.n	8003456 <__swbuf_r+0x62>
 800344c:	89a3      	ldrh	r3, [r4, #12]
 800344e:	07db      	lsls	r3, r3, #31
 8003450:	d506      	bpl.n	8003460 <__swbuf_r+0x6c>
 8003452:	2e0a      	cmp	r6, #10
 8003454:	d104      	bne.n	8003460 <__swbuf_r+0x6c>
 8003456:	4621      	mov	r1, r4
 8003458:	4628      	mov	r0, r5
 800345a:	f000 f933 	bl	80036c4 <_fflush_r>
 800345e:	b988      	cbnz	r0, 8003484 <__swbuf_r+0x90>
 8003460:	4638      	mov	r0, r7
 8003462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003464:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <__swbuf_r+0x9c>)
 8003466:	429c      	cmp	r4, r3
 8003468:	d101      	bne.n	800346e <__swbuf_r+0x7a>
 800346a:	68ac      	ldr	r4, [r5, #8]
 800346c:	e7cf      	b.n	800340e <__swbuf_r+0x1a>
 800346e:	4b09      	ldr	r3, [pc, #36]	; (8003494 <__swbuf_r+0xa0>)
 8003470:	429c      	cmp	r4, r3
 8003472:	bf08      	it	eq
 8003474:	68ec      	ldreq	r4, [r5, #12]
 8003476:	e7ca      	b.n	800340e <__swbuf_r+0x1a>
 8003478:	4621      	mov	r1, r4
 800347a:	4628      	mov	r0, r5
 800347c:	f000 f81e 	bl	80034bc <__swsetup_r>
 8003480:	2800      	cmp	r0, #0
 8003482:	d0cb      	beq.n	800341c <__swbuf_r+0x28>
 8003484:	f04f 37ff 	mov.w	r7, #4294967295
 8003488:	e7ea      	b.n	8003460 <__swbuf_r+0x6c>
 800348a:	bf00      	nop
 800348c:	080039a8 	.word	0x080039a8
 8003490:	080039c8 	.word	0x080039c8
 8003494:	08003988 	.word	0x08003988

08003498 <_write_r>:
 8003498:	b538      	push	{r3, r4, r5, lr}
 800349a:	4d07      	ldr	r5, [pc, #28]	; (80034b8 <_write_r+0x20>)
 800349c:	4604      	mov	r4, r0
 800349e:	4608      	mov	r0, r1
 80034a0:	4611      	mov	r1, r2
 80034a2:	2200      	movs	r2, #0
 80034a4:	602a      	str	r2, [r5, #0]
 80034a6:	461a      	mov	r2, r3
 80034a8:	f7fd fc08 	bl	8000cbc <_write>
 80034ac:	1c43      	adds	r3, r0, #1
 80034ae:	d102      	bne.n	80034b6 <_write_r+0x1e>
 80034b0:	682b      	ldr	r3, [r5, #0]
 80034b2:	b103      	cbz	r3, 80034b6 <_write_r+0x1e>
 80034b4:	6023      	str	r3, [r4, #0]
 80034b6:	bd38      	pop	{r3, r4, r5, pc}
 80034b8:	2000012c 	.word	0x2000012c

080034bc <__swsetup_r>:
 80034bc:	4b32      	ldr	r3, [pc, #200]	; (8003588 <__swsetup_r+0xcc>)
 80034be:	b570      	push	{r4, r5, r6, lr}
 80034c0:	681d      	ldr	r5, [r3, #0]
 80034c2:	4606      	mov	r6, r0
 80034c4:	460c      	mov	r4, r1
 80034c6:	b125      	cbz	r5, 80034d2 <__swsetup_r+0x16>
 80034c8:	69ab      	ldr	r3, [r5, #24]
 80034ca:	b913      	cbnz	r3, 80034d2 <__swsetup_r+0x16>
 80034cc:	4628      	mov	r0, r5
 80034ce:	f7ff fb1b 	bl	8002b08 <__sinit>
 80034d2:	4b2e      	ldr	r3, [pc, #184]	; (800358c <__swsetup_r+0xd0>)
 80034d4:	429c      	cmp	r4, r3
 80034d6:	d10f      	bne.n	80034f8 <__swsetup_r+0x3c>
 80034d8:	686c      	ldr	r4, [r5, #4]
 80034da:	89a3      	ldrh	r3, [r4, #12]
 80034dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034e0:	0719      	lsls	r1, r3, #28
 80034e2:	d42c      	bmi.n	800353e <__swsetup_r+0x82>
 80034e4:	06dd      	lsls	r5, r3, #27
 80034e6:	d411      	bmi.n	800350c <__swsetup_r+0x50>
 80034e8:	2309      	movs	r3, #9
 80034ea:	6033      	str	r3, [r6, #0]
 80034ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80034f0:	81a3      	strh	r3, [r4, #12]
 80034f2:	f04f 30ff 	mov.w	r0, #4294967295
 80034f6:	e03e      	b.n	8003576 <__swsetup_r+0xba>
 80034f8:	4b25      	ldr	r3, [pc, #148]	; (8003590 <__swsetup_r+0xd4>)
 80034fa:	429c      	cmp	r4, r3
 80034fc:	d101      	bne.n	8003502 <__swsetup_r+0x46>
 80034fe:	68ac      	ldr	r4, [r5, #8]
 8003500:	e7eb      	b.n	80034da <__swsetup_r+0x1e>
 8003502:	4b24      	ldr	r3, [pc, #144]	; (8003594 <__swsetup_r+0xd8>)
 8003504:	429c      	cmp	r4, r3
 8003506:	bf08      	it	eq
 8003508:	68ec      	ldreq	r4, [r5, #12]
 800350a:	e7e6      	b.n	80034da <__swsetup_r+0x1e>
 800350c:	0758      	lsls	r0, r3, #29
 800350e:	d512      	bpl.n	8003536 <__swsetup_r+0x7a>
 8003510:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003512:	b141      	cbz	r1, 8003526 <__swsetup_r+0x6a>
 8003514:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003518:	4299      	cmp	r1, r3
 800351a:	d002      	beq.n	8003522 <__swsetup_r+0x66>
 800351c:	4630      	mov	r0, r6
 800351e:	f000 f991 	bl	8003844 <_free_r>
 8003522:	2300      	movs	r3, #0
 8003524:	6363      	str	r3, [r4, #52]	; 0x34
 8003526:	89a3      	ldrh	r3, [r4, #12]
 8003528:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800352c:	81a3      	strh	r3, [r4, #12]
 800352e:	2300      	movs	r3, #0
 8003530:	6063      	str	r3, [r4, #4]
 8003532:	6923      	ldr	r3, [r4, #16]
 8003534:	6023      	str	r3, [r4, #0]
 8003536:	89a3      	ldrh	r3, [r4, #12]
 8003538:	f043 0308 	orr.w	r3, r3, #8
 800353c:	81a3      	strh	r3, [r4, #12]
 800353e:	6923      	ldr	r3, [r4, #16]
 8003540:	b94b      	cbnz	r3, 8003556 <__swsetup_r+0x9a>
 8003542:	89a3      	ldrh	r3, [r4, #12]
 8003544:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800354c:	d003      	beq.n	8003556 <__swsetup_r+0x9a>
 800354e:	4621      	mov	r1, r4
 8003550:	4630      	mov	r0, r6
 8003552:	f000 f92b 	bl	80037ac <__smakebuf_r>
 8003556:	89a0      	ldrh	r0, [r4, #12]
 8003558:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800355c:	f010 0301 	ands.w	r3, r0, #1
 8003560:	d00a      	beq.n	8003578 <__swsetup_r+0xbc>
 8003562:	2300      	movs	r3, #0
 8003564:	60a3      	str	r3, [r4, #8]
 8003566:	6963      	ldr	r3, [r4, #20]
 8003568:	425b      	negs	r3, r3
 800356a:	61a3      	str	r3, [r4, #24]
 800356c:	6923      	ldr	r3, [r4, #16]
 800356e:	b943      	cbnz	r3, 8003582 <__swsetup_r+0xc6>
 8003570:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003574:	d1ba      	bne.n	80034ec <__swsetup_r+0x30>
 8003576:	bd70      	pop	{r4, r5, r6, pc}
 8003578:	0781      	lsls	r1, r0, #30
 800357a:	bf58      	it	pl
 800357c:	6963      	ldrpl	r3, [r4, #20]
 800357e:	60a3      	str	r3, [r4, #8]
 8003580:	e7f4      	b.n	800356c <__swsetup_r+0xb0>
 8003582:	2000      	movs	r0, #0
 8003584:	e7f7      	b.n	8003576 <__swsetup_r+0xba>
 8003586:	bf00      	nop
 8003588:	2000000c 	.word	0x2000000c
 800358c:	080039a8 	.word	0x080039a8
 8003590:	080039c8 	.word	0x080039c8
 8003594:	08003988 	.word	0x08003988

08003598 <_close_r>:
 8003598:	b538      	push	{r3, r4, r5, lr}
 800359a:	4d06      	ldr	r5, [pc, #24]	; (80035b4 <_close_r+0x1c>)
 800359c:	2300      	movs	r3, #0
 800359e:	4604      	mov	r4, r0
 80035a0:	4608      	mov	r0, r1
 80035a2:	602b      	str	r3, [r5, #0]
 80035a4:	f7fd fb0d 	bl	8000bc2 <_close>
 80035a8:	1c43      	adds	r3, r0, #1
 80035aa:	d102      	bne.n	80035b2 <_close_r+0x1a>
 80035ac:	682b      	ldr	r3, [r5, #0]
 80035ae:	b103      	cbz	r3, 80035b2 <_close_r+0x1a>
 80035b0:	6023      	str	r3, [r4, #0]
 80035b2:	bd38      	pop	{r3, r4, r5, pc}
 80035b4:	2000012c 	.word	0x2000012c

080035b8 <__sflush_r>:
 80035b8:	898a      	ldrh	r2, [r1, #12]
 80035ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035be:	4605      	mov	r5, r0
 80035c0:	0710      	lsls	r0, r2, #28
 80035c2:	460c      	mov	r4, r1
 80035c4:	d458      	bmi.n	8003678 <__sflush_r+0xc0>
 80035c6:	684b      	ldr	r3, [r1, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	dc05      	bgt.n	80035d8 <__sflush_r+0x20>
 80035cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	dc02      	bgt.n	80035d8 <__sflush_r+0x20>
 80035d2:	2000      	movs	r0, #0
 80035d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035da:	2e00      	cmp	r6, #0
 80035dc:	d0f9      	beq.n	80035d2 <__sflush_r+0x1a>
 80035de:	2300      	movs	r3, #0
 80035e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80035e4:	682f      	ldr	r7, [r5, #0]
 80035e6:	602b      	str	r3, [r5, #0]
 80035e8:	d032      	beq.n	8003650 <__sflush_r+0x98>
 80035ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80035ec:	89a3      	ldrh	r3, [r4, #12]
 80035ee:	075a      	lsls	r2, r3, #29
 80035f0:	d505      	bpl.n	80035fe <__sflush_r+0x46>
 80035f2:	6863      	ldr	r3, [r4, #4]
 80035f4:	1ac0      	subs	r0, r0, r3
 80035f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035f8:	b10b      	cbz	r3, 80035fe <__sflush_r+0x46>
 80035fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035fc:	1ac0      	subs	r0, r0, r3
 80035fe:	2300      	movs	r3, #0
 8003600:	4602      	mov	r2, r0
 8003602:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003604:	6a21      	ldr	r1, [r4, #32]
 8003606:	4628      	mov	r0, r5
 8003608:	47b0      	blx	r6
 800360a:	1c43      	adds	r3, r0, #1
 800360c:	89a3      	ldrh	r3, [r4, #12]
 800360e:	d106      	bne.n	800361e <__sflush_r+0x66>
 8003610:	6829      	ldr	r1, [r5, #0]
 8003612:	291d      	cmp	r1, #29
 8003614:	d82c      	bhi.n	8003670 <__sflush_r+0xb8>
 8003616:	4a2a      	ldr	r2, [pc, #168]	; (80036c0 <__sflush_r+0x108>)
 8003618:	40ca      	lsrs	r2, r1
 800361a:	07d6      	lsls	r6, r2, #31
 800361c:	d528      	bpl.n	8003670 <__sflush_r+0xb8>
 800361e:	2200      	movs	r2, #0
 8003620:	6062      	str	r2, [r4, #4]
 8003622:	04d9      	lsls	r1, r3, #19
 8003624:	6922      	ldr	r2, [r4, #16]
 8003626:	6022      	str	r2, [r4, #0]
 8003628:	d504      	bpl.n	8003634 <__sflush_r+0x7c>
 800362a:	1c42      	adds	r2, r0, #1
 800362c:	d101      	bne.n	8003632 <__sflush_r+0x7a>
 800362e:	682b      	ldr	r3, [r5, #0]
 8003630:	b903      	cbnz	r3, 8003634 <__sflush_r+0x7c>
 8003632:	6560      	str	r0, [r4, #84]	; 0x54
 8003634:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003636:	602f      	str	r7, [r5, #0]
 8003638:	2900      	cmp	r1, #0
 800363a:	d0ca      	beq.n	80035d2 <__sflush_r+0x1a>
 800363c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003640:	4299      	cmp	r1, r3
 8003642:	d002      	beq.n	800364a <__sflush_r+0x92>
 8003644:	4628      	mov	r0, r5
 8003646:	f000 f8fd 	bl	8003844 <_free_r>
 800364a:	2000      	movs	r0, #0
 800364c:	6360      	str	r0, [r4, #52]	; 0x34
 800364e:	e7c1      	b.n	80035d4 <__sflush_r+0x1c>
 8003650:	6a21      	ldr	r1, [r4, #32]
 8003652:	2301      	movs	r3, #1
 8003654:	4628      	mov	r0, r5
 8003656:	47b0      	blx	r6
 8003658:	1c41      	adds	r1, r0, #1
 800365a:	d1c7      	bne.n	80035ec <__sflush_r+0x34>
 800365c:	682b      	ldr	r3, [r5, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0c4      	beq.n	80035ec <__sflush_r+0x34>
 8003662:	2b1d      	cmp	r3, #29
 8003664:	d001      	beq.n	800366a <__sflush_r+0xb2>
 8003666:	2b16      	cmp	r3, #22
 8003668:	d101      	bne.n	800366e <__sflush_r+0xb6>
 800366a:	602f      	str	r7, [r5, #0]
 800366c:	e7b1      	b.n	80035d2 <__sflush_r+0x1a>
 800366e:	89a3      	ldrh	r3, [r4, #12]
 8003670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003674:	81a3      	strh	r3, [r4, #12]
 8003676:	e7ad      	b.n	80035d4 <__sflush_r+0x1c>
 8003678:	690f      	ldr	r7, [r1, #16]
 800367a:	2f00      	cmp	r7, #0
 800367c:	d0a9      	beq.n	80035d2 <__sflush_r+0x1a>
 800367e:	0793      	lsls	r3, r2, #30
 8003680:	680e      	ldr	r6, [r1, #0]
 8003682:	bf08      	it	eq
 8003684:	694b      	ldreq	r3, [r1, #20]
 8003686:	600f      	str	r7, [r1, #0]
 8003688:	bf18      	it	ne
 800368a:	2300      	movne	r3, #0
 800368c:	eba6 0807 	sub.w	r8, r6, r7
 8003690:	608b      	str	r3, [r1, #8]
 8003692:	f1b8 0f00 	cmp.w	r8, #0
 8003696:	dd9c      	ble.n	80035d2 <__sflush_r+0x1a>
 8003698:	6a21      	ldr	r1, [r4, #32]
 800369a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800369c:	4643      	mov	r3, r8
 800369e:	463a      	mov	r2, r7
 80036a0:	4628      	mov	r0, r5
 80036a2:	47b0      	blx	r6
 80036a4:	2800      	cmp	r0, #0
 80036a6:	dc06      	bgt.n	80036b6 <__sflush_r+0xfe>
 80036a8:	89a3      	ldrh	r3, [r4, #12]
 80036aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036ae:	81a3      	strh	r3, [r4, #12]
 80036b0:	f04f 30ff 	mov.w	r0, #4294967295
 80036b4:	e78e      	b.n	80035d4 <__sflush_r+0x1c>
 80036b6:	4407      	add	r7, r0
 80036b8:	eba8 0800 	sub.w	r8, r8, r0
 80036bc:	e7e9      	b.n	8003692 <__sflush_r+0xda>
 80036be:	bf00      	nop
 80036c0:	20400001 	.word	0x20400001

080036c4 <_fflush_r>:
 80036c4:	b538      	push	{r3, r4, r5, lr}
 80036c6:	690b      	ldr	r3, [r1, #16]
 80036c8:	4605      	mov	r5, r0
 80036ca:	460c      	mov	r4, r1
 80036cc:	b913      	cbnz	r3, 80036d4 <_fflush_r+0x10>
 80036ce:	2500      	movs	r5, #0
 80036d0:	4628      	mov	r0, r5
 80036d2:	bd38      	pop	{r3, r4, r5, pc}
 80036d4:	b118      	cbz	r0, 80036de <_fflush_r+0x1a>
 80036d6:	6983      	ldr	r3, [r0, #24]
 80036d8:	b90b      	cbnz	r3, 80036de <_fflush_r+0x1a>
 80036da:	f7ff fa15 	bl	8002b08 <__sinit>
 80036de:	4b14      	ldr	r3, [pc, #80]	; (8003730 <_fflush_r+0x6c>)
 80036e0:	429c      	cmp	r4, r3
 80036e2:	d11b      	bne.n	800371c <_fflush_r+0x58>
 80036e4:	686c      	ldr	r4, [r5, #4]
 80036e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0ef      	beq.n	80036ce <_fflush_r+0xa>
 80036ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80036f0:	07d0      	lsls	r0, r2, #31
 80036f2:	d404      	bmi.n	80036fe <_fflush_r+0x3a>
 80036f4:	0599      	lsls	r1, r3, #22
 80036f6:	d402      	bmi.n	80036fe <_fflush_r+0x3a>
 80036f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036fa:	f7ff faa3 	bl	8002c44 <__retarget_lock_acquire_recursive>
 80036fe:	4628      	mov	r0, r5
 8003700:	4621      	mov	r1, r4
 8003702:	f7ff ff59 	bl	80035b8 <__sflush_r>
 8003706:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003708:	07da      	lsls	r2, r3, #31
 800370a:	4605      	mov	r5, r0
 800370c:	d4e0      	bmi.n	80036d0 <_fflush_r+0xc>
 800370e:	89a3      	ldrh	r3, [r4, #12]
 8003710:	059b      	lsls	r3, r3, #22
 8003712:	d4dd      	bmi.n	80036d0 <_fflush_r+0xc>
 8003714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003716:	f7ff fa96 	bl	8002c46 <__retarget_lock_release_recursive>
 800371a:	e7d9      	b.n	80036d0 <_fflush_r+0xc>
 800371c:	4b05      	ldr	r3, [pc, #20]	; (8003734 <_fflush_r+0x70>)
 800371e:	429c      	cmp	r4, r3
 8003720:	d101      	bne.n	8003726 <_fflush_r+0x62>
 8003722:	68ac      	ldr	r4, [r5, #8]
 8003724:	e7df      	b.n	80036e6 <_fflush_r+0x22>
 8003726:	4b04      	ldr	r3, [pc, #16]	; (8003738 <_fflush_r+0x74>)
 8003728:	429c      	cmp	r4, r3
 800372a:	bf08      	it	eq
 800372c:	68ec      	ldreq	r4, [r5, #12]
 800372e:	e7da      	b.n	80036e6 <_fflush_r+0x22>
 8003730:	080039a8 	.word	0x080039a8
 8003734:	080039c8 	.word	0x080039c8
 8003738:	08003988 	.word	0x08003988

0800373c <_lseek_r>:
 800373c:	b538      	push	{r3, r4, r5, lr}
 800373e:	4d07      	ldr	r5, [pc, #28]	; (800375c <_lseek_r+0x20>)
 8003740:	4604      	mov	r4, r0
 8003742:	4608      	mov	r0, r1
 8003744:	4611      	mov	r1, r2
 8003746:	2200      	movs	r2, #0
 8003748:	602a      	str	r2, [r5, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	f7fd fa60 	bl	8000c10 <_lseek>
 8003750:	1c43      	adds	r3, r0, #1
 8003752:	d102      	bne.n	800375a <_lseek_r+0x1e>
 8003754:	682b      	ldr	r3, [r5, #0]
 8003756:	b103      	cbz	r3, 800375a <_lseek_r+0x1e>
 8003758:	6023      	str	r3, [r4, #0]
 800375a:	bd38      	pop	{r3, r4, r5, pc}
 800375c:	2000012c 	.word	0x2000012c

08003760 <__swhatbuf_r>:
 8003760:	b570      	push	{r4, r5, r6, lr}
 8003762:	460e      	mov	r6, r1
 8003764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003768:	2900      	cmp	r1, #0
 800376a:	b096      	sub	sp, #88	; 0x58
 800376c:	4614      	mov	r4, r2
 800376e:	461d      	mov	r5, r3
 8003770:	da08      	bge.n	8003784 <__swhatbuf_r+0x24>
 8003772:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	602a      	str	r2, [r5, #0]
 800377a:	061a      	lsls	r2, r3, #24
 800377c:	d410      	bmi.n	80037a0 <__swhatbuf_r+0x40>
 800377e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003782:	e00e      	b.n	80037a2 <__swhatbuf_r+0x42>
 8003784:	466a      	mov	r2, sp
 8003786:	f000 f8bb 	bl	8003900 <_fstat_r>
 800378a:	2800      	cmp	r0, #0
 800378c:	dbf1      	blt.n	8003772 <__swhatbuf_r+0x12>
 800378e:	9a01      	ldr	r2, [sp, #4]
 8003790:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003794:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003798:	425a      	negs	r2, r3
 800379a:	415a      	adcs	r2, r3
 800379c:	602a      	str	r2, [r5, #0]
 800379e:	e7ee      	b.n	800377e <__swhatbuf_r+0x1e>
 80037a0:	2340      	movs	r3, #64	; 0x40
 80037a2:	2000      	movs	r0, #0
 80037a4:	6023      	str	r3, [r4, #0]
 80037a6:	b016      	add	sp, #88	; 0x58
 80037a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080037ac <__smakebuf_r>:
 80037ac:	898b      	ldrh	r3, [r1, #12]
 80037ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80037b0:	079d      	lsls	r5, r3, #30
 80037b2:	4606      	mov	r6, r0
 80037b4:	460c      	mov	r4, r1
 80037b6:	d507      	bpl.n	80037c8 <__smakebuf_r+0x1c>
 80037b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80037bc:	6023      	str	r3, [r4, #0]
 80037be:	6123      	str	r3, [r4, #16]
 80037c0:	2301      	movs	r3, #1
 80037c2:	6163      	str	r3, [r4, #20]
 80037c4:	b002      	add	sp, #8
 80037c6:	bd70      	pop	{r4, r5, r6, pc}
 80037c8:	ab01      	add	r3, sp, #4
 80037ca:	466a      	mov	r2, sp
 80037cc:	f7ff ffc8 	bl	8003760 <__swhatbuf_r>
 80037d0:	9900      	ldr	r1, [sp, #0]
 80037d2:	4605      	mov	r5, r0
 80037d4:	4630      	mov	r0, r6
 80037d6:	f7ff fa57 	bl	8002c88 <_malloc_r>
 80037da:	b948      	cbnz	r0, 80037f0 <__smakebuf_r+0x44>
 80037dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037e0:	059a      	lsls	r2, r3, #22
 80037e2:	d4ef      	bmi.n	80037c4 <__smakebuf_r+0x18>
 80037e4:	f023 0303 	bic.w	r3, r3, #3
 80037e8:	f043 0302 	orr.w	r3, r3, #2
 80037ec:	81a3      	strh	r3, [r4, #12]
 80037ee:	e7e3      	b.n	80037b8 <__smakebuf_r+0xc>
 80037f0:	4b0d      	ldr	r3, [pc, #52]	; (8003828 <__smakebuf_r+0x7c>)
 80037f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80037f4:	89a3      	ldrh	r3, [r4, #12]
 80037f6:	6020      	str	r0, [r4, #0]
 80037f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037fc:	81a3      	strh	r3, [r4, #12]
 80037fe:	9b00      	ldr	r3, [sp, #0]
 8003800:	6163      	str	r3, [r4, #20]
 8003802:	9b01      	ldr	r3, [sp, #4]
 8003804:	6120      	str	r0, [r4, #16]
 8003806:	b15b      	cbz	r3, 8003820 <__smakebuf_r+0x74>
 8003808:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800380c:	4630      	mov	r0, r6
 800380e:	f000 f889 	bl	8003924 <_isatty_r>
 8003812:	b128      	cbz	r0, 8003820 <__smakebuf_r+0x74>
 8003814:	89a3      	ldrh	r3, [r4, #12]
 8003816:	f023 0303 	bic.w	r3, r3, #3
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	81a3      	strh	r3, [r4, #12]
 8003820:	89a0      	ldrh	r0, [r4, #12]
 8003822:	4305      	orrs	r5, r0
 8003824:	81a5      	strh	r5, [r4, #12]
 8003826:	e7cd      	b.n	80037c4 <__smakebuf_r+0x18>
 8003828:	08002aa1 	.word	0x08002aa1

0800382c <__malloc_lock>:
 800382c:	4801      	ldr	r0, [pc, #4]	; (8003834 <__malloc_lock+0x8>)
 800382e:	f7ff ba09 	b.w	8002c44 <__retarget_lock_acquire_recursive>
 8003832:	bf00      	nop
 8003834:	20000120 	.word	0x20000120

08003838 <__malloc_unlock>:
 8003838:	4801      	ldr	r0, [pc, #4]	; (8003840 <__malloc_unlock+0x8>)
 800383a:	f7ff ba04 	b.w	8002c46 <__retarget_lock_release_recursive>
 800383e:	bf00      	nop
 8003840:	20000120 	.word	0x20000120

08003844 <_free_r>:
 8003844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003846:	2900      	cmp	r1, #0
 8003848:	d044      	beq.n	80038d4 <_free_r+0x90>
 800384a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800384e:	9001      	str	r0, [sp, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	f1a1 0404 	sub.w	r4, r1, #4
 8003856:	bfb8      	it	lt
 8003858:	18e4      	addlt	r4, r4, r3
 800385a:	f7ff ffe7 	bl	800382c <__malloc_lock>
 800385e:	4a1e      	ldr	r2, [pc, #120]	; (80038d8 <_free_r+0x94>)
 8003860:	9801      	ldr	r0, [sp, #4]
 8003862:	6813      	ldr	r3, [r2, #0]
 8003864:	b933      	cbnz	r3, 8003874 <_free_r+0x30>
 8003866:	6063      	str	r3, [r4, #4]
 8003868:	6014      	str	r4, [r2, #0]
 800386a:	b003      	add	sp, #12
 800386c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003870:	f7ff bfe2 	b.w	8003838 <__malloc_unlock>
 8003874:	42a3      	cmp	r3, r4
 8003876:	d908      	bls.n	800388a <_free_r+0x46>
 8003878:	6825      	ldr	r5, [r4, #0]
 800387a:	1961      	adds	r1, r4, r5
 800387c:	428b      	cmp	r3, r1
 800387e:	bf01      	itttt	eq
 8003880:	6819      	ldreq	r1, [r3, #0]
 8003882:	685b      	ldreq	r3, [r3, #4]
 8003884:	1949      	addeq	r1, r1, r5
 8003886:	6021      	streq	r1, [r4, #0]
 8003888:	e7ed      	b.n	8003866 <_free_r+0x22>
 800388a:	461a      	mov	r2, r3
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	b10b      	cbz	r3, 8003894 <_free_r+0x50>
 8003890:	42a3      	cmp	r3, r4
 8003892:	d9fa      	bls.n	800388a <_free_r+0x46>
 8003894:	6811      	ldr	r1, [r2, #0]
 8003896:	1855      	adds	r5, r2, r1
 8003898:	42a5      	cmp	r5, r4
 800389a:	d10b      	bne.n	80038b4 <_free_r+0x70>
 800389c:	6824      	ldr	r4, [r4, #0]
 800389e:	4421      	add	r1, r4
 80038a0:	1854      	adds	r4, r2, r1
 80038a2:	42a3      	cmp	r3, r4
 80038a4:	6011      	str	r1, [r2, #0]
 80038a6:	d1e0      	bne.n	800386a <_free_r+0x26>
 80038a8:	681c      	ldr	r4, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	6053      	str	r3, [r2, #4]
 80038ae:	4421      	add	r1, r4
 80038b0:	6011      	str	r1, [r2, #0]
 80038b2:	e7da      	b.n	800386a <_free_r+0x26>
 80038b4:	d902      	bls.n	80038bc <_free_r+0x78>
 80038b6:	230c      	movs	r3, #12
 80038b8:	6003      	str	r3, [r0, #0]
 80038ba:	e7d6      	b.n	800386a <_free_r+0x26>
 80038bc:	6825      	ldr	r5, [r4, #0]
 80038be:	1961      	adds	r1, r4, r5
 80038c0:	428b      	cmp	r3, r1
 80038c2:	bf04      	itt	eq
 80038c4:	6819      	ldreq	r1, [r3, #0]
 80038c6:	685b      	ldreq	r3, [r3, #4]
 80038c8:	6063      	str	r3, [r4, #4]
 80038ca:	bf04      	itt	eq
 80038cc:	1949      	addeq	r1, r1, r5
 80038ce:	6021      	streq	r1, [r4, #0]
 80038d0:	6054      	str	r4, [r2, #4]
 80038d2:	e7ca      	b.n	800386a <_free_r+0x26>
 80038d4:	b003      	add	sp, #12
 80038d6:	bd30      	pop	{r4, r5, pc}
 80038d8:	20000124 	.word	0x20000124

080038dc <_read_r>:
 80038dc:	b538      	push	{r3, r4, r5, lr}
 80038de:	4d07      	ldr	r5, [pc, #28]	; (80038fc <_read_r+0x20>)
 80038e0:	4604      	mov	r4, r0
 80038e2:	4608      	mov	r0, r1
 80038e4:	4611      	mov	r1, r2
 80038e6:	2200      	movs	r2, #0
 80038e8:	602a      	str	r2, [r5, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	f7fd f94c 	bl	8000b88 <_read>
 80038f0:	1c43      	adds	r3, r0, #1
 80038f2:	d102      	bne.n	80038fa <_read_r+0x1e>
 80038f4:	682b      	ldr	r3, [r5, #0]
 80038f6:	b103      	cbz	r3, 80038fa <_read_r+0x1e>
 80038f8:	6023      	str	r3, [r4, #0]
 80038fa:	bd38      	pop	{r3, r4, r5, pc}
 80038fc:	2000012c 	.word	0x2000012c

08003900 <_fstat_r>:
 8003900:	b538      	push	{r3, r4, r5, lr}
 8003902:	4d07      	ldr	r5, [pc, #28]	; (8003920 <_fstat_r+0x20>)
 8003904:	2300      	movs	r3, #0
 8003906:	4604      	mov	r4, r0
 8003908:	4608      	mov	r0, r1
 800390a:	4611      	mov	r1, r2
 800390c:	602b      	str	r3, [r5, #0]
 800390e:	f7fd f964 	bl	8000bda <_fstat>
 8003912:	1c43      	adds	r3, r0, #1
 8003914:	d102      	bne.n	800391c <_fstat_r+0x1c>
 8003916:	682b      	ldr	r3, [r5, #0]
 8003918:	b103      	cbz	r3, 800391c <_fstat_r+0x1c>
 800391a:	6023      	str	r3, [r4, #0]
 800391c:	bd38      	pop	{r3, r4, r5, pc}
 800391e:	bf00      	nop
 8003920:	2000012c 	.word	0x2000012c

08003924 <_isatty_r>:
 8003924:	b538      	push	{r3, r4, r5, lr}
 8003926:	4d06      	ldr	r5, [pc, #24]	; (8003940 <_isatty_r+0x1c>)
 8003928:	2300      	movs	r3, #0
 800392a:	4604      	mov	r4, r0
 800392c:	4608      	mov	r0, r1
 800392e:	602b      	str	r3, [r5, #0]
 8003930:	f7fd f963 	bl	8000bfa <_isatty>
 8003934:	1c43      	adds	r3, r0, #1
 8003936:	d102      	bne.n	800393e <_isatty_r+0x1a>
 8003938:	682b      	ldr	r3, [r5, #0]
 800393a:	b103      	cbz	r3, 800393e <_isatty_r+0x1a>
 800393c:	6023      	str	r3, [r4, #0]
 800393e:	bd38      	pop	{r3, r4, r5, pc}
 8003940:	2000012c 	.word	0x2000012c

08003944 <_init>:
 8003944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003946:	bf00      	nop
 8003948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800394a:	bc08      	pop	{r3}
 800394c:	469e      	mov	lr, r3
 800394e:	4770      	bx	lr

08003950 <_fini>:
 8003950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003952:	bf00      	nop
 8003954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003956:	bc08      	pop	{r3}
 8003958:	469e      	mov	lr, r3
 800395a:	4770      	bx	lr
